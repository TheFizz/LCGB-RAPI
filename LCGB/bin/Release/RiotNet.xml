<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RiotNet</name>
    </assembly>
    <members>
        <member name="T:RiotNet.ConnectionFailedException">
            <summary>
            Represents an error that occurs when a REST request fails because it could not to connect to the server.
            </summary>
        </member>
        <member name="M:RiotNet.ConnectionFailedException.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.ConnectionFailedException"/> instance.
            </summary>
        </member>
        <member name="M:RiotNet.ConnectionFailedException.#ctor(RiotNet.RiotResponse)">
            <summary>
            Creates a new <see cref="T:RiotNet.ConnectionFailedException"/> instance.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:RiotNet.ConnectionFailedException.#ctor(RiotNet.RiotResponse,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.ConnectionFailedException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.ConnectionFailedException.#ctor(RiotNet.RiotResponse,System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.ConnectionFailedException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RiotNet.ConnectionFailedException.#ctor(RiotNet.RiotResponse,System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.ConnectionFailedException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.ConnectionFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:RiotNet.ConnectionFailedException"/> instance.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:RiotNet.Conversions">
            <summary>
            Contains functions for converting values.
            </summary>
        </member>
        <member name="M:RiotNet.Conversions.DateTimeToEpochMilliseconds(System.DateTime)">
            <summary>
            Converts a DateTime object into epoch milliseconds (in UTC).
            </summary>
            <param name="time">The DateTime object to convert.</param>
            <returns>Epoch milliseconds.</returns>
        </member>
        <member name="M:RiotNet.Conversions.EpochMillisecondsToDateTime(System.Int64)">
            <summary>
            Converts epoch milliseconds into a DateTime (in UTC).
            </summary>
            <param name="epochMilliseconds">The number of milliseconds since the epoch reference date.</param>
            <returns>A DateTime (in UTC).</returns>
        </member>
        <member name="T:RiotNet.Converters.EpochDateTimeConverter">
            <summary>
            Converts a <see cref="T:System.DateTime"/> to and from JSON in epoch milliseconds format. Can also deserialize from a string in ISO format.
            </summary>
        </member>
        <member name="M:RiotNet.Converters.EpochDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the date.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RiotNet.Converters.EpochDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the date.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.Converters.KeyedCollectionConverter">
            <summary>
            Reads and writes KeyedCollections as JSON objects instead of arrays.
            Any KeyedCollection deserialized by this converter must have a parameterless constructor.
            </summary>
        </member>
        <member name="M:RiotNet.Converters.KeyedCollectionConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">The type to convert.</param>
            <returns><value>true</value> if this converter can convert the specified type; otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RiotNet.Converters.KeyedCollectionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the KeyedCollection as a JSON object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RiotNet.Converters.KeyedCollectionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the KeyedCollection as a JSON object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.Converters.MillisecondsToTimeSpanConverter">
            <summary>
            Converts a <see cref="T:System.TimeSpan"/> to and from a number of seconds in JSON.
            </summary>
        </member>
        <member name="M:RiotNet.Converters.MillisecondsToTimeSpanConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">The type to convert.</param>
            <returns><value>true</value> if this converter can convert the specified type; otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RiotNet.Converters.MillisecondsToTimeSpanConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the time span.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RiotNet.Converters.MillisecondsToTimeSpanConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the time span.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.Converters.RangeConverter">
            <summary>
            Converts a range in JSON to a consistent CLR format.
            </summary>
            <remarks>
            A range value from the Riot Games API could be a list of integers, or the string "self".
            We want to convert the string "self" to an array containing a single zero.
            </remarks>
        </member>
        <member name="M:RiotNet.Converters.RangeConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">The type to convert.</param>
            <returns><value>true</value> if this converter can convert the specified type; otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RiotNet.Converters.RangeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the ranges.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RiotNet.Converters.RangeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the ranges.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.Converters.SecondsToTimeSpanConverter">
            <summary>
            Converts a <see cref="T:System.TimeSpan"/> to and from a number of seconds in JSON.
            </summary>
        </member>
        <member name="M:RiotNet.Converters.SecondsToTimeSpanConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">The type to convert.</param>
            <returns><value>true</value> if this converter can convert the specified type; otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RiotNet.Converters.SecondsToTimeSpanConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the time span.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RiotNet.Converters.SecondsToTimeSpanConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the time span.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.Converters.TolerantIntEnumConverter">
            <summary>
            Converts an enum to and from JSON. If the JSON string value does not exist in the enum, the value is still converted instead of throwing an exception. Values are serialized as numbers.
            </summary>
        </member>
        <member name="M:RiotNet.Converters.TolerantIntEnumConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">The type to convert.</param>
            <returns><value>true</value> if this converter can convert the specified type; otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RiotNet.Converters.TolerantIntEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the enum.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RiotNet.Converters.TolerantIntEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the enum.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.Converters.WinStringConverter">
            <summary>
            Converts an enum to and from JSON. If the JSON string value does not exist in the enum, the value is still converted instead of throwing an exception. Values are serialized as numbers.
            </summary>
        </member>
        <member name="M:RiotNet.Converters.WinStringConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">The type to convert.</param>
            <returns><value>true</value> if this converter can convert the specified type; otherwise <value>false</value>.</returns>
        </member>
        <member name="M:RiotNet.Converters.WinStringConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the enum.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:RiotNet.Converters.WinStringConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the enum.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The date to write.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:RiotNet.HttpContentExtenstions">
            <summary>
            RiotNet extensions for HttpContent.
            </summary>
        </member>
        <member name="M:RiotNet.HttpContentExtenstions.ReadAsAsync``1(System.Net.Http.HttpContent)">
            <summary>
            Reads JSON content and deserializes it as the specified type.
            </summary>
            <typeparam name="T">The type of the object to deserialize.</typeparam>
            <param name="content">An HttpContent containing JSON data.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:RiotNet.JsonContent">
            <summary>
            Represents HTTP content in JSON format.
            </summary>
        </member>
        <member name="M:RiotNet.JsonContent.#ctor(System.Object)">
            <summary>
            Creates a new <see cref="T:RiotNet.JsonContent"/> instance.
            </summary>
            <param name="content">The object to serialize in JSON format.</param>
        </member>
        <member name="M:RiotNet.JsonContent.SerializeToStreamAsync(System.IO.Stream,System.Net.TransportContext)">
            <inheritdoc />
        </member>
        <member name="M:RiotNet.JsonContent.TryComputeLength(System.Int64@)">
            <inheritdoc />
        </member>
        <member name="T:RiotNet.Models.AltImage">
            <summary>
            Contains alternate image data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.Full">
            <summary>
            Gets or sets the file name of the full-size image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.Group">
            <summary>
            Gets or sets the group to which the image belongs.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.Sprite">
            <summary>
            Gets or sets the file name of the sprite image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.X">
            <summary>
            Gets or sets the x-offset of the image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.Y">
            <summary>
            Gets or sets the y-offset of the image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.W">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.H">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.AltImage.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.AltImage"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.BannedChampion">
            <summary>
            Contains information about a banned champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BannedChampion.ChampionId">
            <summary>
            Gets or sets the banned champion id (see StaticChampion Id).
            </summary>
        </member>
        <member name="P:RiotNet.Models.BannedChampion.PickTurn">
            <summary>
            Gets or sets the turn during which the champion was banned.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BannedChampion.TeamId">
            <summary>
            Gets or sets the team that banned the champion. This property is only set correctly by the Spectator API (active games and featured games).
            </summary>
        </member>
        <member name="P:RiotNet.Models.BannedChampion.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.BannedChampion"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.BasicData">
            <summary>
            Represents an item or rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.Description">
            <summary>
            Gets or sets the description of the item/rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.Id">
            <summary>
            Gets or sets the ID of the item or rune.
            </summary>
            <remarks>
            This property is used as the primary key when storing the current object in a database.
            </remarks>
        </member>
        <member name="P:RiotNet.Models.BasicData.Image">
            <summary>
            Gets or sets the image data for the current item/rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.Name">
            <summary>
            Gets or sets the name of the item/rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.SanitizedDescription">
            <summary>
            Gets or sets the sanitized description of the item/rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicData.Tags">
            <summary>
            Gets or sets the tags of the item/rune.
            </summary>
        </member>
        <member name="T:RiotNet.Models.BasicDataStats">
            <summary>
            Represents stats, or buffs, of an object.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatArmorMod">
            <summary>
            Gets the flat armor added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatAttackSpeedMod">
            <summary>
            Gets the flat attack speed added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatBlockMod">
            <summary>
            Gets the flat block chance added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatCritChanceMod">
            <summary>
            Gets the flat critical strike chance added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatCritDamageMod">
            <summary>
            Gets the flat critical strike damage added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatEXPBonus">
            <summary>
            Gets the flat experience bonus added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatEnergyPoolMod">
            <summary>
            Gets the flat energy added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatEnergyRegenMod">
            <summary>
            Gets the flat enery regeneration added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatHPPoolMod">
            <summary>
            Gets the flat health added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatHPRegenMod">
            <summary>
            Gets the flat health regeneration added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatMPPoolMod">
            <summary>
            Gets the flat mana modifiacation to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatMPRegenMod">
            <summary>
            Gets the flat mana regeneration added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatMagicDamageMod">
            <summary>
            Gets the flat ability power added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatMovementSpeedMod">
            <summary>
            Gets the flat movement speed added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatPhysicalDamageMod">
            <summary>
            Gets the flat attack damage added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.FlatSpellBlockMod">
            <summary>
            Gets the flat spell block added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentArmorMod">
            <summary>
            Gets the percent armor added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentAttackSpeedMod">
            <summary>
            Gets the percent attack speed added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentBlockMod">
            <summary>
            Gets the percent block added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentCritChanceMod">
            <summary>
            Gets the percent ctritical strike chance added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentCritDamageMod">
            <summary>
            Gets the percent critical strike damage added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentDodgeMod">
            <summary>
            Gets the percent dodge added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentEXPBonus">
            <summary>
            Gets the percent experience bonus added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentHPPoolMod">
            <summary>
            Gets the percent health added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentHPRegenMod">
            <summary>
            Gets the percent health regeneration added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentLifeStealMod">
            <summary>
            Gets the percent life steal added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentMPPoolMod">
            <summary>
            Gets the percent mana added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentMPRegenMod">
            <summary>
            Gets the percent mana regeneration added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentMagicDamageMod">
            <summary>
            Gets the percent ability power added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentMovementSpeedMod">
            <summary>
            Gets the percent movement speed added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentPhysicalDamageMod">
            <summary>
            Gets the percent attack damage added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentSpellBlockMod">
            <summary>
            Gets the percent spell block added to the target's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BasicDataStats.PercentSpellVampMod">
            <summary>
            Gets the percent spell vamp added to the target's stats.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Block">
            <summary>
            Represents a group of items in an item page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Block.Items">
            <summary>
            Gets or sets the list of items in this block.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Block.RecMath">
            <summary>
            Gets or sets a flag that indicates whether to use tutorial formatting when displaying items in the block. If true, all items within the block are separated by a plus sign with the last item being separated by an arrow indicating that the other items build into the last item.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Block.Type">
            <summary>
            Gets or sets the type (or internal name) of the block.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Block.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.Block"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.BlockItem">
            <summary>
            Represents an item on an item page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BlockItem.Id">
            <summary>
            Gets or sets the ID of the item in this slot.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BlockItem.Count">
            <summary>
            Gets or sets the count of the specified item that is in this slot.
            </summary>
        </member>
        <member name="P:RiotNet.Models.BlockItem.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.BlockItem"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Champion">
            <summary>
            Contains champion data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Champion.Active">
            <summary>
            Gets or sets whether the champion is active.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Champion.BotEnabled">
            <summary>
            Gets or sets whether the champion bot is enabled (for custom games).
            </summary>
        </member>
        <member name="P:RiotNet.Models.Champion.BotMmEnabled">
            <summary>
            Gets or sets whether the champion bot is enabled for match-made games (Co-op vs. AI).
            </summary>
        </member>
        <member name="P:RiotNet.Models.Champion.FreeToPlay">
            <summary>
            Gets or sets whether the champion is currently free to play.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Champion.Id">
            <summary>
            Gets or sets the champion id. This corresponds to a <see cref="T:RiotNet.Models.StaticChampion"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Champion.RankedPlayEnabled">
            <summary>
            Gets or sets the ranked play enabled flag.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ChampionList">
            <summary>
            Contains a list of dynamic champion data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionList.Champions">
            <summary>
            Gets or sets the list of champions.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ChampionMastery">
            <summary>
            Contains champion mastery data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.ChampionId">
            <summary>
            Gets or sets the ID of the champion to which this data applies.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.ChampionLevel">
            <summary>
            Gets or sets the champion mastery level for the champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.ChampionPoints">
            <summary>
            Gets or sets the number of champion points that the player has accumulated for the current champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.ChampionPointsSinceLastLevel">
            <summary>
            Gets or sets the number of champion points that the player has accumulated for the current champion since reaching the last champion level.
            Zero if the player reached maximum champion level for this champion.
            </summary>
            <remarks>
            Don't ask me why this is stored as a long but ChampionPoints is stored as an int. Ask Rito.
            </remarks>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.ChampionPointsUntilNextLevel">
            <summary>
            Gets or sets the number of champion points until the player reaches the next champion level for this champion.
            Zero if the player reached maximum champion level for this champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.ChestGranted">
            <summary>
            Gets or sets whether a chest has been granted for this champion in the current season.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.LastPlayTime">
            <summary>
            Gets or sets the time when the player last played this champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.SummonerId">
            <summary>
            Gets or sets the summoner ID of the player to which this data applies.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.TokensEarned">
            <summary>
            Gets or sets the number of mastery level 6 or 7 tokens earned.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ChampionMastery.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.ChampionMastery"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.AscendedType">
            <summary>
            Represents the ascension event type. Used in <see cref="T:RiotNet.Models.MatchEvent"/> for type <see cref="F:RiotNet.Models.EventType.ASCENDED_EVENT"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.AscendedType.CHAMPION_ASCENDED">
            <summary>
            Indicates that a player has become ascended.
            </summary>
        </member>
        <member name="F:RiotNet.Models.AscendedType.CLEAR_ASCENDED">
            <summary>
            Inticates that a player has killed the ascended player.
            </summary>
        </member>
        <member name="F:RiotNet.Models.AscendedType.MINION_ASCENDED">
            <summary>
            Indicates that a minion has ascended.
            </summary>
        </member>
        <member name="T:RiotNet.Models.BuildingType">
            <summary>
            Represents the building type. Used in <see cref="T:RiotNet.Models.MatchEvent"/> for type <see cref="F:RiotNet.Models.EventType.BUILDING_KILL"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.BuildingType.INHIBITOR_BUILDING">
            <summary>
            Inhibitor building
            </summary>
        </member>
        <member name="F:RiotNet.Models.BuildingType.TOWER_BUILDING">
            <summary>
            Tower building
            </summary>
        </member>
        <member name="T:RiotNet.Models.EventType">
            <summary>
            Represents the event type. Used in <see cref="T:RiotNet.Models.MatchEvent"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.ASCENDED_EVENT">
            <summary>
            Ascended event
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.BUILDING_KILL">
            <summary>
            Building kill
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.CAPTURE_POINT">
            <summary>
            Capture point
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.CHAMPION_KILL">
            <summary>
            Champion kill
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.ELITE_MONSTER_KILL">
            <summary>
            Elite monster kill
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.ITEM_DESTROYED">
            <summary>
            Item destroyed. This usually indicates that an item was built into a higher tier item.
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.ITEM_PURCHASED">
            <summary>
            Item purchased
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.ITEM_SOLD">
            <summary>
            Item sold
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.ITEM_UNDO">
            <summary>
            Item undo
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.PORO_KING_SUMMON">
            <summary>
            Poro king summon
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.SKILL_LEVEL_UP">
            <summary>
            Skill level up
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.WARD_KILL">
            <summary>
            Ward kill
            </summary>
        </member>
        <member name="F:RiotNet.Models.EventType.WARD_PLACED">
            <summary>
            Ward placed
            </summary>
        </member>
        <member name="T:RiotNet.Models.GameMode">
            <summary>
            Represents the game mode.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.CLASSIC">
            <summary>
            Classic, played on both Summoner's Rift and Twisted Treeline.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.ODIN">
            <summary>
            Dominion, played on The Crystal Scar.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.ARAM">
            <summary>
            All Random All Mid, played on both Howling Abyss and Butcher's Bridge.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.TUTORIAL">
            <summary>
            Tutorial.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.URF">
            <summary>
            Ultra-Rapid-Fire
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.DOOMBOTSTEEMO">
            <summary>
            Boom Bots
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.ONEFORALL">
            <summary>
            One for All, played on both Summoner's Rift and Howling Abyss.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.ASCENSION">
            <summary>
            Ascension, played on The Crystal Scar.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.FIRSTBLOOD">
            <summary>
            Snowdown Showdown, played on the Howling Abyss.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.KINGPORO">
            <summary>
            Legend of the Poro King, played on the Howling Abyss.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.SIEGE">
            <summary>
            Nexus Siege
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.ASSASSINATE">
            <summary>
            Blood Hunt Assassin
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.ARSR">
            <summary>
            All Random Summoner's Rift
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.DARKSTAR">
            <summary>
            Darkstar
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.STARGUARDIAN">
            <summary>
            Star Guardian Invasion
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameMode.PROJECT">
            <summary>
            PROJECT: Hunters
            </summary>
        </member>
        <member name="T:RiotNet.Models.GameType">
            <summary>
            Represents the game type.
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameType.CUSTOM_GAME">
            <summary>
            Custom game
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameType.MATCHED_GAME">
            <summary>
            Matched game (any game that is queued up for)
            </summary>
        </member>
        <member name="F:RiotNet.Models.GameType.TUTORIAL_GAME">
            <summary>
            Tutorial
            </summary>
        </member>
        <member name="T:RiotNet.Models.LaneType">
            <summary>
            Represents the lane an event occured. Used in <see cref="T:RiotNet.Models.MatchEvent"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.LaneType.BOT_LANE">
            <summary>
            Bot lane
            </summary>
        </member>
        <member name="F:RiotNet.Models.LaneType.MID_LANE">
            <summary>
            Mid lane
            </summary>
        </member>
        <member name="F:RiotNet.Models.LaneType.TOP_LANE">
            <summary>
            Top lane
            </summary>
        </member>
        <member name="T:RiotNet.Models.LevelUpType">
            <summary>
            Represents the level up type. Used in <see cref="T:RiotNet.Models.MatchEvent"/> for event type <see cref="F:RiotNet.Models.EventType.SKILL_LEVEL_UP"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.LevelUpType.EVOLVE">
            <summary>
            Evolve
            </summary>
        </member>
        <member name="F:RiotNet.Models.LevelUpType.NORMAL">
            <summary>
            Normal
            </summary>
        </member>
        <member name="T:RiotNet.Models.Locale">
            <summary>
            Locale codes (language codes) for requesting data from the Static Data API.
            </summary>
            <remarks>
            This list contains all supported locales at the time of the RiotNet release.
            If you want to iteralte over all currently supported locales, use <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>
            </remarks>
        </member>
        <member name="F:RiotNet.Models.Locale.cs_CZ">
            <summary>
            Czech (Czech Republic)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.de_DE">
            <summary>
            German (Germany)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.el_GR">
            <summary>
            Greek (Greece)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.en_AU">
            <summary>
            English (Australia)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.en_GB">
            <summary>
            English (United Kingdom)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.en_PH">
            <summary>
            English (Philippines)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.en_SG">
            <summary>
            English (Singapore)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.en_US">
            <summary>
            English (United States)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.es_AR">
            <summary>
            Spanish (Argentina)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.es_ES">
            <summary>
            Spanish (Spain, International Sort)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.es_MX">
            <summary>
            Spanish (Mexico)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.fr_FR">
            <summary>
            French (France)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.hu_HU">
            <summary>
            Hungarian (Hungary)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.id_ID">
            <summary>
            Indonesian (Indonesia)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.it_IT">
            <summary>
            Italian (Italy)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.ja_JP">
            <summary>
            Japanese (Japan)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.ko_KR">
            <summary>
            Korean (Korea)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.ms_MY">
            <summary>
            Malay (Malaysia)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.pl_PL">
            <summary>
            Polish (Poland)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.pt_BR">
            <summary>
            Portuguese (Brazil)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.ro_RO">
            <summary>
            Romanian (Romania)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.ru_RU">
            <summary>
            Russian (Russia)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.th_TH">
            <summary>
            Thai (Thailand)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.tr_TR">
            <summary>
            Turkish (Turkey)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.vn_VN">
            <summary>
            Vietnamese (Vietnam)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.zh_CN">
            <summary>
            Chinese (Simplified, China)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.zh_MY">
            <summary>
            Chinese (Malaysia)
            </summary>
        </member>
        <member name="F:RiotNet.Models.Locale.zh_TW">
            <summary>
            Chinese (Traditional, Taiwan)
            </summary>
        </member>
        <member name="M:RiotNet.Models.Locale.GetCultureInfo(System.String)">
            <summary>
            Gets the culture info for a locale.
            </summary>
            <param name="locale">The locale (or language tag). This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <returns>The culture info.</returns>
        </member>
        <member name="T:RiotNet.Models.MapType">
            <summary>
            Represents a map type for a tournament game.
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapType.SUMMONERS_RIFT">
            <summary>
            Summoner's Rift
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapType.TWISTED_TREELINE">
            <summary>
            Twisted Treeline
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapType.CRYSTAL_SCAR">
            <summary>
            Crystal Scar (dominion)
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapType.HOWLING_ABYSS">
            <summary>
            Howling Abyss (ARAM)
            </summary>
        </member>
        <member name="T:RiotNet.Models.MapId">
            <summary>
            Represents a map ID for a match.
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapId.SUMMONERS_RIFT_V1_SUMMER">
            <summary>
            Summoner's Rift (original version - summer)
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapId.SUMMONERS_RIFT_V1_AUTUMN">
            <summary>
            Summoner's Rift (original version - autumn)
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapId.PROVING_GROUNDS">
            <summary>
            Proving Grounds (tutorial)
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapId.TWISTED_TREELINE_V1">
            <summary>
            Twisted Treeline (original version)
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapId.CRYSTAL_SCAR">
            <summary>
            Crystal Scar (dominion)
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapId.TWISTED_TREELINE_V2">
            <summary>
            Twisted Treeline (current version)
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapId.SUMMONERS_RIFT_V2">
            <summary>
            Summoner's Rift (current version)
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapId.HOWLING_ABYSS">
            <summary>
            Howling Abyss (ARAM)
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapId.BUTCHERS_BRIDGE">
            <summary>
            Butcher's Bridge (ARAM)
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapId.COSMIC_RUINS">
            <summary>
            Cosmic Ruins (Dark Star: Singularity)
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapId.VALORAN_CITY">
            <summary>
            Valoran City (Star Guardian Invasion)
            </summary>
        </member>
        <member name="F:RiotNet.Models.MapId.SUBSTRUCTURE_43">
            <summary>
            Substructure 43 (PROJECT: Hunters)
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchRole">
            <summary>
            Represents a player's role.
            </summary>
        </member>
        <member name="F:RiotNet.Models.MatchRole.DUO">
            <summary>
            Duo
            </summary>
        </member>
        <member name="F:RiotNet.Models.MatchRole.NONE">
            <summary>
            None
            </summary>
        </member>
        <member name="F:RiotNet.Models.MatchRole.SOLO">
            <summary>
            Solo
            </summary>
        </member>
        <member name="F:RiotNet.Models.MatchRole.DUO_CARRY">
            <summary>
            Duo carry
            </summary>
        </member>
        <member name="F:RiotNet.Models.MatchRole.DUO_SUPPORT">
            <summary>
            Duo support
            </summary>
        </member>
        <member name="T:RiotNet.Models.MonsterType">
            <summary>
            Represents the type of monster that an event applies to. This is only valid for buff monsters and epic monsters.
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterType.BARON_NASHOR">
            <summary>
            Baron nashor
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterType.BLUE_GOLEM">
            <summary>
            Blue golem
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterType.DRAGON">
            <summary>
            Dragon
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterType.RED_LIZARD">
            <summary>
            Red lizard
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterType.RIFTHERALD">
            <summary>
            Rift Herald
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterType.VILEMAW">
            <summary>
            Vilemaw
            </summary>
        </member>
        <member name="T:RiotNet.Models.MonsterSubType">
            <summary>
            Represents a monster sub-type in a <see cref="T:RiotNet.Models.MatchEvent"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterSubType.AIR_DRAGON">
            <summary>
            Cloud dragon
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterSubType.EARTH_DRAGON">
            <summary>
            Mountain dragon
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterSubType.FIRE_DRAGON">
            <summary>
            Infernal dragon
            </summary>
        </member>
        <member name="F:RiotNet.Models.MonsterSubType.WATER_DRAGON">
            <summary>
            Ocean dragon
            </summary>
        </member>
        <member name="T:RiotNet.Models.MastertyTreeType">
            <summary>
            Indicates a type of mastery tree.
            </summary>
        </member>
        <member name="F:RiotNet.Models.MastertyTreeType.Ferocity">
            <summary>
            Specifies the Ferocity mastery tree.
            </summary>
        </member>
        <member name="F:RiotNet.Models.MastertyTreeType.Cunning">
            <summary>
            Specifies the Cunning mastery tree.
            </summary>
        </member>
        <member name="F:RiotNet.Models.MastertyTreeType.Resolve">
            <summary>
            Specifies the Resolve mastery tree.
            </summary>
        </member>
        <member name="T:RiotNet.Models.PickType">
            <summary>
            The method used for picking champions.
            </summary>
        </member>
        <member name="F:RiotNet.Models.PickType.BLIND_PICK">
            <summary>
            Blind pick
            </summary>
        </member>
        <member name="F:RiotNet.Models.PickType.DRAFT_MODE">
            <summary>
            Draft pick
            </summary>
        </member>
        <member name="F:RiotNet.Models.PickType.ALL_RANDOM">
            <summary>
            All randowm
            </summary>
        </member>
        <member name="F:RiotNet.Models.PickType.TOURNAMENT_DRAFT">
            <summary>
            Tournament draft pick
            </summary>
        </member>
        <member name="T:RiotNet.Models.PlayerPosition">
            <summary>
            Represents player's position, or lane.
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlayerPosition.TOP">
            <summary>
            Top lane
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlayerPosition.MIDDLE">
            <summary>
            Mid lane (used by <see cref="T:RiotNet.Models.MatchParticipantTimeline"/> objects)
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlayerPosition.MID">
            <summary>
            Mid lane (used by <see cref="T:RiotNet.Models.MatchReference"/> objects)
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlayerPosition.JUNGLE">
            <summary>
            Jungle
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlayerPosition.BOTTOM">
            <summary>
            Bot lane
            </summary>
        </member>
        <member name="M:RiotNet.Models.PlayerPosition.IsMidLane(System.String)">
            <summary>
            Gets whether the specified lane value is MID or MIDDLE.
            </summary>
            <param name="lane">The lane.</param>
            <returns>True if the value is mid lane, otherwise false.</returns>
        </member>
        <member name="T:RiotNet.Models.Point">
            <summary>
            Represents a capturable point in Dominion. Used in <see cref="T:RiotNet.Models.MatchEvent"/> for event type <see cref="F:RiotNet.Models.EventType.CAPTURE_POINT"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.Point.POINT_A">
            <summary>
            Point a
            </summary>
        </member>
        <member name="F:RiotNet.Models.Point.POINT_B">
            <summary>
            Point b
            </summary>
        </member>
        <member name="F:RiotNet.Models.Point.POINT_C">
            <summary>
            Point c
            </summary>
        </member>
        <member name="F:RiotNet.Models.Point.POINT_D">
            <summary>
            Point d
            </summary>
        </member>
        <member name="F:RiotNet.Models.Point.POINT_E">
            <summary>
            Point e
            </summary>
        </member>
        <member name="T:RiotNet.Models.RankedQueue">
            <summary>
            Represents a ranked queue type.
            </summary>
        </member>
        <member name="F:RiotNet.Models.RankedQueue.RANKED_SOLO_5x5">
            <summary>
            Ranked Solo 5v5
            </summary>
        </member>
        <member name="F:RiotNet.Models.RankedQueue.RANKED_FLEX_SR">
            <summary>
            Ranked Flex Summoner's Rift
            </summary>
        </member>
        <member name="F:RiotNet.Models.RankedQueue.RANKED_FLEX_TT">
            <summary>
            Ranked Flex Twisted Treeline.
            </summary>
        </member>
        <member name="T:RiotNet.Models.PlatformId">
            <summary>
            Represents a platform (or server).
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlatformId.BR1">
            <summary>
            Brazil
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlatformId.EUN1">
            <summary>
            Europe Nordic &amp; East
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlatformId.EUW1">
            <summary>
            Europe West
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlatformId.JP1">
            <summary>
            Japan
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlatformId.KR">
            <summary>
            Korea
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlatformId.LA1">
            <summary>
            Latin America North
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlatformId.LA2">
            <summary>
            Latin America South
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlatformId.NA1">
            <summary>
            North America
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlatformId.OC1">
            <summary>
            Oceania
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlatformId.TR1">
            <summary>
            Turkey
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlatformId.RU">
            <summary>
            Russia
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlatformId.PBE1">
            <summary>
            Public Beta Environment
            </summary>
        </member>
        <member name="F:RiotNet.Models.PlatformId.All">
            <summary>
            The list of all known platform IDs.
            </summary>
        </member>
        <member name="M:RiotNet.Models.PlatformId.IsNorthAmerica(System.String)">
            <summary>
            Gets whether the platform ID represents North America. (For old North America accounts, platform ID may equal "NA" instead of "NA1".)
            </summary>
            <param name="platformId">The platform ID.</param>
            <returns>true if the platform ID represents North America; otherwise false.</returns>
        </member>
        <member name="T:RiotNet.Models.RegionalProxy">
            <summary>
            Represents a Regional Proxy service name.
            </summary>
            <remarks>
            Some services are regional, rather than globally deployed, and thus use a regional endpoint for all requests, even if a platform is specified in the request.
            </remarks>
        </member>
        <member name="F:RiotNet.Models.RegionalProxy.Americas">
            <summary>
            Americas
            </summary>
        </member>
        <member name="F:RiotNet.Models.RegionalProxy.Europe">
            <summary>
            Europe
            </summary>
        </member>
        <member name="F:RiotNet.Models.RegionalProxy.Asia">
            <summary>
            Asia
            </summary>
        </member>
        <member name="T:RiotNet.Models.ServerStatus">
            <summary>
            Represents the status of one of the services on the Riot servers.
            </summary>
        </member>
        <member name="F:RiotNet.Models.ServerStatus.Online">
            <summary>
            Online
            </summary>
        </member>
        <member name="F:RiotNet.Models.ServerStatus.Alert">
            <summary>
            Alert
            </summary>
        </member>
        <member name="F:RiotNet.Models.ServerStatus.Offline">
            <summary>
            Offline
            </summary>
        </member>
        <member name="F:RiotNet.Models.ServerStatus.Deploying">
            <summary>
            Deploying
            </summary>
        </member>
        <member name="T:RiotNet.Models.Severity">
            <summary>
            Represents the server incident message severity.
            </summary>
        </member>
        <member name="F:RiotNet.Models.Severity.Info">
            <summary>
            Info
            </summary>
        </member>
        <member name="F:RiotNet.Models.Severity.Alert">
            <summary>
            Alert
            </summary>
        </member>
        <member name="F:RiotNet.Models.Severity.Error">
            <summary>
            Error
            </summary>
        </member>
        <member name="T:RiotNet.Models.SpectatorType">
            <summary>
            The type of spectators allowed for a game.
            </summary>
        </member>
        <member name="F:RiotNet.Models.SpectatorType.NONE">
            <summary>
            No spectators are allowed.
            </summary>
        </member>
        <member name="F:RiotNet.Models.SpectatorType.LOBBYONLY">
            <summary>
            Spectators are allowed only if they joined in the lobby.
            </summary>
        </member>
        <member name="F:RiotNet.Models.SpectatorType.ALL">
            <summary>
            Spectators can join at any point (in the lobby or after the game starts).
            </summary>
        </member>
        <member name="T:RiotNet.Models.Tier">
            <summary>
            Represents a ranked tier.
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.CHALLENGER">
            <summary>
            Challenger tier
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.GRANDMASTER">
            <summary>
            Grandmaster tier
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.MASTER">
            <summary>
            Master tier
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.DIAMOND">
            <summary>
            Diamond tier
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.PLATINUM">
            <summary>
            Platinum tier
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.GOLD">
            <summary>
            Gold tier
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.SILVER">
            <summary>
            Silver tier
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.BRONZE">
            <summary>
            Bronze tier
            </summary>
        </member>
        <member name="F:RiotNet.Models.Tier.IRON">
            <summary>
            Iron tier
            </summary>
        </member>
        <member name="T:RiotNet.Models.LanePosition">
            <summary>
            Represents a lane position.
            </summary>
        </member>
        <member name="F:RiotNet.Models.LanePosition.NONE">
            <summary>
            Not defined.
            </summary>
        </member>
        <member name="F:RiotNet.Models.LanePosition.TOP">
            <summary>
            Top lane.
            </summary>
        </member>
        <member name="F:RiotNet.Models.LanePosition.JUNGLE">
            <summary>
            Jungle.
            </summary>
        </member>
        <member name="F:RiotNet.Models.LanePosition.MIDDLE">
            <summary>
            Middle lane.
            </summary>
        </member>
        <member name="F:RiotNet.Models.LanePosition.BOTTOM">
            <summary>
            Bottom lane.
            </summary>
        </member>
        <member name="F:RiotNet.Models.LanePosition.UTILITY">
            <summary>
            Support lane.
            </summary>
        </member>
        <member name="F:RiotNet.Models.LanePosition.APEX">
            <summary>
            Apex.
            </summary>
        </member>
        <member name="T:RiotNet.Models.TowerType">
            <summary>
            Represents the tower type. Used in <see cref="T:RiotNet.Models.MatchEvent"/> for event type <see cref="F:RiotNet.Models.EventType.BUILDING_KILL"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.TowerType.BASE_TURRET">
            <summary>
            Inhibitor turret
            </summary>
        </member>
        <member name="F:RiotNet.Models.TowerType.FOUNTAIN_TURRET">
            <summary>
            Fountain turret
            </summary>
        </member>
        <member name="F:RiotNet.Models.TowerType.INNER_TURRET">
            <summary>
            Inner turret
            </summary>
        </member>
        <member name="F:RiotNet.Models.TowerType.NEXUS_TURRET">
            <summary>
            Nexus turret
            </summary>
        </member>
        <member name="F:RiotNet.Models.TowerType.OUTER_TURRET">
            <summary>
            Outer turret
            </summary>
        </member>
        <member name="F:RiotNet.Models.TowerType.UNDEFINED_TURRET">
            <summary>
            Undefined turret (this represents an inhibitor, not a turret)
            </summary>
        </member>
        <member name="T:RiotNet.Models.WardType">
            <summary>
            Represents the ward type. Used in <see cref="T:RiotNet.Models.MatchEvent"/> for event types <see cref="F:RiotNet.Models.EventType.WARD_KILL"/> and <see cref="F:RiotNet.Models.EventType.WARD_PLACED"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.WardType.SIGHT_WARD">
            <summary>
            Sight ward
            </summary>
        </member>
        <member name="F:RiotNet.Models.WardType.TEEMO_MUSHROOM">
            <summary>
            Teemo mushroom
            </summary>
        </member>
        <member name="F:RiotNet.Models.WardType.UNDEFINED">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:RiotNet.Models.WardType.VISION_WARD">
            <summary>
            Vision ward
            </summary>
        </member>
        <member name="F:RiotNet.Models.WardType.YELLOW_TRINKET">
            <summary>
            Yellow trinket
            </summary>
        </member>
        <member name="F:RiotNet.Models.WardType.YELLOW_TRINKET_UPGRADE">
            <summary>
            Yellow trinket upgrade (probably not used since season 6)
            </summary>
        </member>
        <member name="F:RiotNet.Models.WardType.BLUE_TRINKET">
            <summary>
            Blue trinket
            </summary>
        </member>
        <member name="F:RiotNet.Models.WardType.CONTROL_WARD">
            <summary>
            Control ward
            </summary>
        </member>
        <member name="T:RiotNet.Models.CurrentGameInfo">
            <summary>
            Contains info about a game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.CurrentGameInfo.Participants">
            <summary>
            Gets or sets the participant information.
            </summary>
        </member>
        <member name="T:RiotNet.Models.CurrentGameParticipant">
            <summary>
            Contains information about a participant in a game that is in progress (or was in progress at the time the data was retrieved).
            </summary>
        </member>
        <member name="P:RiotNet.Models.CurrentGameParticipant.Perks">
            <summary>
             Gets or sets the list of masteries used by this participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.CurrentGameParticipant.GameCustomizationObjects">
            <summary>
            Gets or sets the list of customizations chosen by this participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.CurrentGameParticipant.SummonerId">
            <summary>
             Gets or sets the summoner ID of this participant.
            </summary>
        </member>
        <member name="T:RiotNet.Models.QueueType">
            <summary>
            Respresents the queue type.
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.CUSTOM">
            <summary>
            Custom
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.NORMAL_5x5_BLIND">
            <summary>
            Normal 5v5 Blind Pick
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.RANKED_SOLO_5x5">
            <summary>
            Ranked Solo 5v5
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.RANKED_PREMADE_5x5">
            <summary>
            Ranked Premade 5v5. This queue is deprecated.
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_5x5">
            <summary>
            Historical Summoner's Rift Coop vs AI. This queue is deprecated.
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.NORMAL_3x3">
            <summary>
            Normal 3v3
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.RANKED_FLEX_TT">
            <summary>
            Ranked Flex 3v3. This was formerly called <see cref="F:RiotNet.Models.QueueType.RANKED_PREMADE_3x3"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.RANKED_PREMADE_3x3">
            <summary>
            Ranked Flex 3v3. This is the old name for <see cref="F:RiotNet.Models.QueueType.RANKED_FLEX_TT"/>.
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.NORMAL_5x5_DRAFT">
            <summary>
            Normal 5v5 Draft Pick
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ODIN_5x5_BLIND">
            <summary>
            Dominion 5v5 Blind Pick
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ODIN_5x5_DRAFT">
            <summary>
            Dominion 5v5 Draft Pick
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_ODIN_5x5">
            <summary>
            Dominion Coop vs AI
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_5x5_INTRO">
            <summary>
            Summoner's Rift Coop vs AI Intro Bot
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_5x5_BEGINNER">
            <summary>
            Summoner's Rift Coop vs AI Beginner Bot
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_5x5_INTERMEDIATE">
            <summary>
            Summoner's Rift Coop vs AI Intermediate Bot
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.RANKED_TEAM_3x3">
            <summary>
            Ranked Team 3v3
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.RANKED_TEAM_5x5">
            <summary>
            Ranked Team 5v5
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_TT_3x3">
            <summary>
            Twisted Treeline Coop vs AI (Intermediate bots)
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_TT_3x3_INTERMEDIATE">
            <summary>
            Twisted Treeline Coop vs AI (Intermediate bots)
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_TT_3x3_INTRO">
            <summary>
            Twisted Treeline Coop vs AI (Intro bots)
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_TT_3x3_BEGINNER">
            <summary>
            Twisted Treeline Coop vs AI (Beginner bots)
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.GROUP_FINDER_5x5">
            <summary>
            Team Builder
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ARAM_5x5">
            <summary>
            All Random All Mid
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ONEFORALL_5x5">
            <summary>
            One for All
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.FIRSTBLOOD_1x1">
            <summary>
            Snowdown Showdown 1v1
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.FIRSTBLOOD_2x2">
            <summary>
            Snowdown Showdown 2v2
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.SR_6x6">
            <summary>
            Summoner's Rift Hexakill
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.URF_5x5">
            <summary>
            Ultra Rapid Fire
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BOT_URF_5x5">
            <summary>
            Ultra Rapid Fire games played against AI
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.NIGHTMARE_BOT_5x5_RANK1">
            <summary>
            Doom Bots Rank 1
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.NIGHTMARE_BOT_5x5_RANK2">
            <summary>
            Doom Bots Rank 2
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.NIGHTMARE_BOT_5x5_RANK5">
            <summary>
            Doom Bots Rank 5
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ASCENSION_5x5">
            <summary>
            Ascension
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.HEXAKILL">
            <summary>
            Twisted Treeline Hexakill
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BILGEWATER_ARAM_5x5">
            <summary>
            Bilgewater version of All Random All Mid
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.KING_PORO_5x5">
            <summary>
            King Poro
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.COUNTER_PICK">
            <summary>
            Nemesis draft
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.BILGEWATER_5x5">
            <summary>
            Black Market Brawlers
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.SIEGE">
            <summary>
            Nexus Siege
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.DEFINITELY_NOT_DOMINION_5x5">
            <summary>
            Definitely Not Dominion
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ARURF_5x5">
            <summary>
            All Random URF
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ARSR_5x5">
            <summary>
            All Random Summoner's Rift
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.TEAM_BUILDER_DRAFT_UNRANKED_5x5">
            <summary>
            Normal 5v5 Draft Pick
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.TEAM_BUILDER_DRAFT_RANKED_5x5">
            <summary>
            Ranked Dynamic Queue. This queue is deprecated.
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.TEAM_BUILDER_RANKED_SOLO">
            <summary>
            Ranked Solo/Duo Queue
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.TB_BLIND_SUMMONERS_RIFT_5x5">
            <summary>
            Normal 5v5 Blind Pick
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.RANKED_FLEX_SR">
            <summary>
            Ranked Flex Summoner's Rift
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ASSASSINATE_5x5">
            <summary>
            Blood Hunt Assassin
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.DARKSTAR_3x3">
            <summary>
            Dark Star: Singularity
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.CLASH">
            <summary>
            Summoner's Rift Clash Games
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ARURF">
            <summary>
            All random URF
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ASCENSION">
            <summary>
            Ascension
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.PORO_KING">
            <summary>
            Legend of the Poro King
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.NEXUS_SIEGE">
            <summary>
            Nexus Siege
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.DOOM_BOTS_VOTING">
            <summary>
            Doom Bots (voting)
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.DOOM_BOTS_STANDARD">
            <summary>
            Doom Bots (standard)
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.STAR_GUARDIAN_NORMAL">
            <summary>
            Star Guardian Invasion: Normal
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.STAR_GUARDIAN_ONSLAUGHT">
            <summary>
            Star Guardian Invasion: Onslaught
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.OVERCHARGE">
            <summary>
            PROJECT: Hunters
            </summary>
        </member>
        <member name="F:RiotNet.Models.QueueType.ARURF_SNOW">
            <summary>
            All random URF (snow)
            </summary>
        </member>
        <member name="T:RiotNet.Models.Season">
            <summary>
            Represents the season.
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.PRESEASON3">
            <summary>
            Pre-season 3, 2013
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.SEASON3">
            <summary>
            Season 3, 2013
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.PRESEASON2014">
            <summary>
            Pre-season 4, 2014
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.SEASON2014">
            <summary>
            Season 4, 2014
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.PRESEASON2015">
            <summary>
            Pre-season 5, 2015
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.SEASON2015">
            <summary>
            Season 5, 2015
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.PRESEASON2016">
            <summary>
            Pre-season 6, 2016
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.SEASON2016">
            <summary>
            Season 6, 2016
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.PRESEASON2017">
            <summary>
            Pre-season 7, 2017
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.SEASON2017">
            <summary>
            Season 7, 2017
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.PRESEASON2018">
            <summary>
            Pre-season 8, 2018
            </summary>
        </member>
        <member name="F:RiotNet.Models.Season.SEASON2018">
            <summary>
            Season 8, 2018
            </summary>
        </member>
        <member name="T:RiotNet.Models.TeamSide">
            <summary>
            Identifies which side/team the player was on.
            </summary>
        </member>
        <member name="F:RiotNet.Models.TeamSide.Team1">
            <summary>
            Team 1 (blue).
            </summary>
        </member>
        <member name="F:RiotNet.Models.TeamSide.Team2">
            <summary>
            Team 2 (red).
            </summary>
        </member>
        <member name="T:RiotNet.Models.FeaturedGameInfo">
            <summary>
            Contains some information on a featured game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.FeaturedGameInfo.Participants">
            <summary>
            Gets or sets the participant information.
            </summary>
        </member>
        <member name="T:RiotNet.Models.FeaturedGames">
            <summary>
            Contains list of featured games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.FeaturedGames.ClientRefreshInterval">
            <summary>
             Gets or sets the suggested interval to wait before requesting featured games again.
            </summary>
        </member>
        <member name="P:RiotNet.Models.FeaturedGames.GameList">
            <summary>
             Gets or sets the list of featured games.
            </summary>
        </member>
        <member name="T:RiotNet.Models.GameCustomizationObject">
            <summary>
            Represents game customization data chosen by a participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameCustomizationObject.Category">
            <summary>
            Gets or sets the customization category.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameCustomizationObject.Content">
            <summary>
            Gets or sets the customization content.
            </summary>
        </member>
        <member name="T:RiotNet.Models.GameInfoBase">
            <summary>
            Base information for games (used in <see cref="T:RiotNet.Models.FeaturedGameInfo"/> and <see cref="T:RiotNet.Models.CurrentGameInfo"/>).
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.BannedChampions">
            <summary>
            Gets or sets the list of banned champion information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.GameId">
            <summary>
            Gets or sets the game Id.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.GameLength">
            <summary>
            Gets or sets the amount of time in seconds that has passed since the game started.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.GameMode">
            <summary>
            Gets or sets the game mode. This should equal one of the <see cref="T:RiotNet.Models.GameMode"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.GameQueueConfigId">
            <summary>
            Gets or sets the queue type.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.GameStartTime">
            <summary>
            Gets or sets the game start time in UTC.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.GameType">
            <summary>
            Gets of sets the game type. This should equal one of the <see cref="T:RiotNet.Models.GameType"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.MapId">
            <summary>
            Gets or sets the map id.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.Observers">
            <summary>
            Gets or sets the observer information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.GameInfoBase.PlatformId">
            <summary>
            Gets or sets the ID of the platform on which the game is being played. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Gold">
            <summary>
            Contains purchase information for an item.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Gold.Base">
            <summary>
            Gets or sets the cost of the item excluding the cost of its recipe.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Gold.Purchasable">
            <summary>
            Gets or sets whether the item can be purchased.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Gold.Sell">
            <summary>
            Gets or sets the sell price of the item.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Gold.Total">
            <summary>
            Gets or sets the total cost of the item including the cost of its recipe.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Group">
            <summary>
            Contains item group data, which defines the maximum number of items of a certain type that a player can own.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Group.MaxGroupOwnable">
            <summary>
            Gets or sets the maximum number of items in the current group that a player is allowed to own.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Group.Key">
            <summary>
            Gets or sets the name of the group.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Group.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.Group"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Image">
            <summary>
            Contains image data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Image.Full">
            <summary>
            Gets or sets the file name of the full-size image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Image.Group">
            <summary>
            Gets or sets the group to which the image belongs.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Image.Sprite">
            <summary>
            Gets or sets the file name of the sprite image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Image.X">
            <summary>
            Gets or sets the x-offset of the image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Image.Y">
            <summary>
            Gets or sets the y-offset of the image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Image.W">
            <summary>
            Gets or sets the width of the image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Image.H">
            <summary>
            Gets or sets the height of the image.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Incident">
            <summary>
            Represents a server incident report.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Incident.Active">
            <summary>
            Gets or sets flag stating if incident is active.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Incident.CreatedAt">
            <summary>
            Gets or sets incident created time in UTC.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Incident.Id">
            <summary>
            Gets or sets incident id.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Incident.Updates">
            <summary>
            Gets or sets list of update messages for the incident.
            </summary>
        </member>
        <member name="T:RiotNet.Models.LeagueItem">
            <summary>
            Contains league participant information representing a summoner.
            </summary>
        </member>
        <member name="M:RiotNet.Models.LeagueItem.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.LeagueItem"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueItem.Rank">
            <summary>
            Gets or sets a Roman numeral representing the division that the participant is in.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueItem.FreshBlood">
            <summary>
            Gets or sets whether the participant is fresh blood.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueItem.HotStreak">
            <summary>
            Gets or sets whether the participant is on a hot streak.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueItem.Inactive">
            <summary>
            Gets or sets whether the participant is inactive.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueItem.Veteran">
            <summary>
            Gets or sets whether the participant is a veteran.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueItem.LeaguePoints">
            <summary>
            Gets or sets the number of league points that the participant has.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueItem.Losses">
            <summary>
            Gets or sets the number of losses that the participant has.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueItem.MiniSeries">
            <summary>
            Gets or sets the promotion series for the participant, or null if the participant is not is a series.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueItem.SummonerId">
            <summary>
            Gets or sets the summoner's ID in string format.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueItem.SummonerName">
            <summary>
            Gets or sets the summoner's name.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueItem.Wins">
            <summary>
            Gets or sets the number of wins that the participant has.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueItem.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.LeagueItem"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.LeagueList">
            <summary>
            Represents a ranked league.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueList.LeagueId">
            <summary>
            Gets or sets the UIID of the league.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueList.Entries">
            <summary>
            Gets or sets the entries for all participants in the league.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueList.Name">
            <summary>
            Gets or sets the name of the league.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueList.Queue">
            <summary>
            Gets or sets the league's ranked queue type. This should equal one of the <see cref="T:RiotNet.Models.RankedQueue"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeagueList.Tier">
            <summary>
            Gets or sets the league's tier. This should equal one of the <see cref="T:RiotNet.Models.Tier"/> values.
            </summary>
        </member>
        <member name="T:RiotNet.Models.LeaguePosition">
            <summary>
            Contains league participant information representing a summoner. Also contains information about the legue containing this entry.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeaguePosition.LeagueId">
            <summary>
            Gets or sets the ID of the league.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeaguePosition.LeagueName">
            <summary>
            Gets or sets the name of the league.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeaguePosition.QueueType">
            <summary>
            Gets or sets the league's queue type. This should equal one of the <see cref="T:RiotNet.Models.RankedQueue"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeaguePosition.Tier">
            <summary>
            Gets or sets the league's tier. This should equal one of the <see cref="T:RiotNet.Models.Tier"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LeaguePosition.Position">
            <summary>
            Gets or sets the league's position. This should equal one of the <see cref="T:RiotNet.Models.LanePosition"/> values.
            </summary>
        </member>
        <member name="T:RiotNet.Models.LevelTip">
            <summary>
            Explains what happens when levelling up an ability.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LevelTip.Effect">
            <summary>
            Gets or sets the effects that change for each rank of the ability.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LevelTip.Label">
            <summary>
            Gets or sets the labels for the corresponding effects that change at each rank of the ability.
            </summary>
        </member>
        <member name="T:RiotNet.Models.LobbyEvent">
            <summary>
            Represents an event that occurred in a game lobby.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LobbyEvent.EventType">
            <summary>
            Gets or sets the type of event that occurred.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LobbyEvent.SummonerId">
            <summary>
            Gets or sets the ID of the summoner who triggered the event, if any.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LobbyEvent.Timestamp">
            <summary>
            Gets or sets time at which the event occurred.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LobbyEvent.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.LobbyEvent"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.LobbyEventWrapper">
            <summary>
            Contains a list of lobby events.
            </summary>
        </member>
        <member name="P:RiotNet.Models.LobbyEventWrapper.EventList">
            <summary>
            Gets or sets the list of events.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Mastery">
            <summary>
            Contains information about a single mastery in a mastery page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Mastery.Id">
            <summary>
            Gets or sets the ID of this mastery. This corresponds to a <see cref="T:RiotNet.Models.StaticMastery"/> ID. This is equal to <see cref="P:RiotNet.Models.Mastery.MasteryId"/>, but it is set by the Summoner API.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Mastery.MasteryId">
            <summary>
            Gets or sets the ID of this mastery. This corresponds to a <see cref="T:RiotNet.Models.StaticMastery"/> ID. This is equal to <see cref="P:RiotNet.Models.Mastery.Id"/>, but it is set by the Match and Spectator APIs.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Mastery.Rank">
            <summary>
            Gets or sets the number of mastery points put into this mastery.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Mastery.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.Mastery"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Match">
            <summary>
            Contains detailed game information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Match.GameId">
            <summary>
            Gets or sets the ID of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Match.MapId">
            <summary>
            Gets or sets the map ID of the map where the match was played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Match.GameCreation">
            <summary>
            Gets or sets the game creation time in UTC. Designates when the team select lobby is created and/or the game is made through match making; not when the game actually starts.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Match.GameDuration">
            <summary>
            Gets or sets the game duration.
            </summary>
            <remarks>
            The game duration is serialized as an integer representing the duration of the game in seconds.
            </remarks>
        </member>
        <member name="P:RiotNet.Models.Match.GameMode">
            <summary>
            Gets or sets the game mode. This should equal one of the <see cref="T:RiotNet.Models.GameMode"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Match.GameType">
            <summary>
            Gets or sets the game type. This should equal one of the <see cref="T:RiotNet.Models.GameType"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Match.GameVersion">
            <summary>
            Gets or sets the game version (patch number).
            </summary>
        </member>
        <member name="P:RiotNet.Models.Match.ParticipantIdentities">
            <summary>
            Gets or sets the list of participants' identity information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Match.Participants">
            <summary>
            Gets or sets the list of participants' information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Match.PlatformId">
            <summary>
            Gets or sets the platform ID of the match. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Match.QueueId">
            <summary>
            Gets or sets the game queue type.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Match.SeasonId">
            <summary>
            Gets or sets season when the game was played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Match.Teams">
            <summary>
            Gets or sets team information.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchEvent">
            <summary>
            This object contains game event information. Note that not all legal type values documented below are valid for all games. Event data evolves over time and certain values may be relevant only for older or newer games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.AfterId">
            <summary>
            Gets or sets the ending item ID of the event. Used for undo events - if this is 0, the item was un-bought.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.AscendedType">
            <summary>
            Gets or sets the ascended type of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.AssistingParticipantIds">
            <summary>
            Gets or sets the assisting participant IDs of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.BeforeId">
            <summary>
            Gets or sets the starting item ID of the event. Used for undo events - if this is 0, the item was un-sold.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.BuildingType">
            <summary>
            Gets or sets the building type of the event. Only present if relevant. This should equal one of the <see cref="T:RiotNet.Models.BuildingType"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.CreatorId">
            <summary>
            Gets or sets the participant ID of the participant who created the object. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.EventType">
            <summary>
            Gets or sets event type.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.ItemId">
            <summary>
            Gets or sets the item ID of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.KillerId">
            <summary>
            Gets or sets the participant ID of the killer. Only present if relevant. Killer ID 0 indicates a minion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.LaneType">
            <summary>
            Gets or sets the lane type of the event. Only present if relevant. This should equal one of the <see cref="T:RiotNet.Models.LaneType"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.LevelUpType">
            <summary>
            Gets or sets the level up type of the event. Only present if relevant. This should equal one of the <see cref="T:RiotNet.Models.LevelUpType"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.MonsterType">
            <summary>
            Gets or sets the monster type of the event. Only present if relevant. This should equal one of the <see cref="T:RiotNet.Models.MonsterType"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.MonsterSubType">
            <summary>
            Gets or sets the monster sub-type of the event. Only present if relevant (i.e. for dragon kills). This should equal one of the <see cref="T:RiotNet.Models.MonsterSubType"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.ParticipantId">
            <summary>
            Gets or sets the participant ID (1-10) of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.PointCaptured">
            <summary>
            Gets or sets the point captured in the event. Only present if relevant. This should equal one of the <see cref="T:RiotNet.Models.Point"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.Position">
            <summary>
            Gets or sets the position of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.SkillSlot">
            <summary>
            Gets or sets the skill slot of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.TeamId">
            <summary>
            Gets or sets the team ID of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.Timestamp">
            <summary>
            Gets or sets the game time at which the event occurred.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.TowerType">
            <summary>
            Gets or sets the tower type of the event. Only present if relevant. This should equal one of the <see cref="T:RiotNet.Models.TowerType"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.Type">
            <summary>
            Gets or sets event type. This should equal one of the <see cref="T:RiotNet.Models.EventType"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.VictimId">
            <summary>
            Gets or sets the participant ID of the victiom of the event. Only present if relevant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.WardType">
            <summary>
            Gets or sets the ward type of the event. Only present if relevant. This should equal one of the <see cref="T:RiotNet.Models.WardType"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchEvent.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.MatchEvent"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchFrame">
            <summary>
            This object contains game frame information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchFrame.Events">
            <summary>
            Gets or sets list of events for this frame.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchFrame.ParticipantFrames">
            <summary>
            Gets or sets each participant's information for the frame, mapped by the participant's ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchFrame.Timestamp">
            <summary>
            Gets or sets game time at which the frame occurred.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchFrame.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.MatchFrame"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchList">
            <summary>
            Contains a list of matches, with basic match information. Returned when using the Matchlist API. 
            The end index of the list may be modified to ensure that there is a maximum of 20 games in the list.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchList.EndIndex">
            <summary>
            Gets or sets the end index of the match list (<see cref="P:RiotNet.Models.MatchList.Matches"/>).
            The end index may be modified to ensure that there is a maximum of 20 games in the list.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchList.Matches">
            <summary>
            Gets or sets the list of matches. A maximum of 20 games may be in this list.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchList.StartIndex">
            <summary>
            Gets or sets the start index for the list of matches.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchList.TotalGames">
            <summary>
            Gets or sets the the total number of games in the match list.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchParticipant">
            <summary>
            This object contains match participant information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.ChampionId">
            <summary>
            Gets or sets champion ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.HighestAchievedSeasonTier">
            <summary>
            Gets or sets highest ranked tier achieved for the previous season, if any; otherwise null. Used to display border in game loading screen. This should equal one of the <see cref="T:RiotNet.Models.Tier"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.Masteries">
            <summary>
            Gets or sets list of mastery information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.ParticipantId">
            <summary>
            Gets or sets the match participant ID (normally 1-10).
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.Runes">
            <summary>
            Gets or sets the list of rune information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.Spell1Id">
            <summary>
            Gets or sets the first summoner spell ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.Spell2Id">
            <summary>
            Gets or sets the second summoner spell ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.Stats">
            <summary>
            Gets or sets the participant statistics.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.TeamId">
            <summary>
            Gets or sets the team ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.Timeline">
            <summary>
            Gets or sets timeline data. Delta fields refer to values for the specified period. Diff fields refer to the deltas versus the calculated lane opponent(s).
            </summary>
            <remarks>
            Delta fields refer to values for the specified period
            (e.g. the gold per minute over the first 10 minutes of the game versus the second 20 minutes of the game).
            Diff fields refer to the deltas versus the calculated lane opponent(s).
            </remarks>
        </member>
        <member name="P:RiotNet.Models.MatchParticipant.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.MatchParticipant"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchParticipantFrame">
            <summary>
            This object contains participant frame information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.CurrentGold">
            <summary>
            Gets or sets participant's current gold.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.DominionScore">
            <summary>
            Gets or sets dominion score of the participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.JungleMinionsKilled">
            <summary>
            Gets or sets number of jungle minions killed by participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.Level">
            <summary>
            Gets or sets participant's current level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.MinionsKilled">
            <summary>
            Gets or sets number of minions killed by participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.ParticipantId">
            <summary>
            Gets or sets participant ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.Position">
            <summary>
            Gets or sets participant's position.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.TeamScore">
            <summary>
            Gets or sets team score of the participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.TotalGold">
            <summary>
            Gets or sets participant's total gold.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.Xp">
            <summary>
            Gets or sets experience earned by participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantFrame.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.MatchParticipantFrame"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchParticipantFrameCollection">
            <summary>
            A collection of <see cref="T:RiotNet.Models.MatchParticipantFrame"/>, mapped by participant ID.
            </summary>
        </member>
        <member name="M:RiotNet.Models.MatchParticipantFrameCollection.GetKeyForItem(RiotNet.Models.MatchParticipantFrame)">
            <summary>
            Gets the key for an item.
            </summary>
            <param name="item">The item to get the key from.</param>
            <returns>The key.</returns>
        </member>
        <member name="T:RiotNet.Models.MatchParticipantIdentity">
            <summary>
            Contains participant identity information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantIdentity.ParticipantId">
            <summary>
            Gets or sets participant ID (normally 1-10; this value appears to always be 0 when coming from the Match History API).
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantIdentity.Player">
            <summary>
            Gets or sets player information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantIdentity.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.MatchParticipantIdentity"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchParticipantStats">
            <summary>
            This object contains participant statistics information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.AltarsCaptured">
            <summary>
            Gets or sets the number of assists.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.AltarsNeutralized">
            <summary>
            Gets or sets the number of alters neutralized.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Assists">
            <summary>
            Gets or sets the number of assists.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.ChampLevel">
            <summary>
            Gets or sets the champion level at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.CombatPlayerScore">
            <summary>
            Gets or sets the player's combat score if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.DamageDealtToObjectives">
            <summary>
            Gets or sets the amount of damage dealt to objectives.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.DamageDealtToTurrets">
            <summary>
            Gets or sets the amount of damage dealt to turrets.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.DamageSelfMitigated">
            <summary>
            Gets or sets the amount of self-mitigated damage.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Deaths">
            <summary>
            Gets or sets the number of deaths.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.DoubleKills">
            <summary>
            Gets or sets the number of double kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.FirstBloodAssist">
            <summary>
            Gets or sets a flag indicating if participant got an assist on first blood.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.FirstBloodKill">
            <summary>
            Gets or sets a flag indicating if participant got first blood.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.FirstInhibitorAssist">
            <summary>
            Gets or sets a flag indicating if participant got an assist on the first inhibitor.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.FirstInhibitorKill">
            <summary>
            Gets or sets a flag indicating if participant destroyed the first inhibitor.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.FirstTowerAssist">
            <summary>
            Gets or sets a flag indicating if participant got an assist on the first tower.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.FirstTowerKill">
            <summary>
            Gets or sets a flag indicating if participant destroyed the first tower.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.GoldEarned">
            <summary>
            Gets or sets the gold earned by the participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.GoldSpent">
            <summary>
            Gets or sets the gold spent by the participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.InhibitorKills">
            <summary>
            Gets or sets the number of inhibitor kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Item0">
            <summary>
            Gets or sets the ID of the item in slot 0 at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Item1">
            <summary>
            Gets or sets the ID of the item in slot 1 at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Item2">
            <summary>
            Gets or sets the ID of the item in slot 2 at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Item3">
            <summary>
            Gets or sets the ID of the item in slot 3 at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Item4">
            <summary>
            Gets or sets the ID of the item in slot 4 at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Item5">
            <summary>
            Gets or sets the ID of the item in slot 5 at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Item6">
            <summary>
            Gets or sets the ID of the item in slot 6 at the end of the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.KillingSprees">
            <summary>
            Gets or sets the number of killing sprees.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Kills">
            <summary>
            Gets or sets the number of kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.LargestCriticalStrike">
            <summary>
            Gets or sets the largest critical strike.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.LargestKillingSpree">
            <summary>
            Gets or sets the largest killing spree.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.LargestMultiKill">
            <summary>
            Gets or sets the largest multi kill.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.LongestTimeSpentLiving">
            <summary>
            Gets or sets the longest amount of time spent living.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.MagicDamageDealt">
            <summary>
            Gets or sets the amount of magical damage dealt.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.MagicDamageDealtToChampions">
            <summary>
            Gets or setsthe amount of magical damage dealt to champions.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.MagicalDamageTaken">
            <summary>
            Gets or sets the amount of magic damage taken.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalMinionsKilled">
            <summary>
            Gets or sets the number of minions killed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.NeutralMinionsKilled">
            <summary>
            Gets or sets the number of neutral minions killed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.NeutralMinionsKilledEnemyJungle">
            <summary>
            Gets or sets the number of neutral jungle minions killed in the enemy team's jungle.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.NeutralMinionsKilledTeamJungle">
            <summary>
            Gets or sets nthe number of eutral jungle minions killed in your team's jungle.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.NodeCapture">
            <summary>
            Gets or sets the number of point captures if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.NodeCaptureAssist">
            <summary>
            Gets or sets the number of point capture assists if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.NodeNeutralize">
            <summary>
            Gets or sets the number of point neutralizations if game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.NodeNeutralizeAssist">
            <summary>
            Gets or sets the number of point neutralization assists if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.ObjectivePlayerScore">
            <summary>
            Gets or sets the player's objectives score if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.ParticipantId">
            <summary>
            Gets or sets the participant ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.PentaKills">
            <summary>
            Gets or sets the number of penta kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.PerkPrimaryStyle">
            <summary>
            Gets or sets the primary rune style used.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.PerkSubStyle">
            <summary>
            Gets or sets the secondary rune style used.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk0">
            <summary>
            Gets or sets the perk 0 ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk0Var1">
            <summary>
            Gets or sets the perk 0 var 1 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk0Var2">
            <summary>
            Gets or sets the perk 0 var 2 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk0Var3">
            <summary>
            Gets or sets the perk 0 var 3 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk1">
            <summary>
            Gets or sets the perk 1 ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk1Var1">
            <summary>
            Gets or sets the perk 1 var 1 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk1Var2">
            <summary>
            Gets or sets the perk 1 var 2 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk1Var3">
            <summary>
            Gets or sets the perk 1 var 3 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk2">
            <summary>
            Gets or sets the perk 2 ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk2Var1">
            <summary>
            Gets or sets the perk 2 var 1 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk2Var2">
            <summary>
            Gets or sets the perk 2 var 2 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk2Var3">
            <summary>
            Gets or sets the perk 2 var 3 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk3">
            <summary>
            Gets or sets the perk 3 ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk3Var1">
            <summary>
            Gets or sets the perk 3 var 1 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk3Var2">
            <summary>
            Gets or sets the perk 3 var 2 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk3Var3">
            <summary>
            Gets or sets the perk 3 var 3 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk4">
            <summary>
            Gets or sets the perk 4 ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk4Var1">
            <summary>
            Gets or sets the perk 4 var 1 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk4Var2">
            <summary>
            Gets or sets the perk 4 var 2 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk4Var3">
            <summary>
            Gets or sets the perk 4 var 3 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk5">
            <summary>
            Gets or sets the perk 5 ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk5Var1">
            <summary>
            Gets or sets the perk 5 var 1 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk5Var2">
            <summary>
            Gets or sets the perk 5 var 2 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Perk5Var3">
            <summary>
            Gets or sets the perk 5 var 3 value.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.PhysicalDamageDealt">
            <summary>
            Gets or sets the amount of physical damage dealt.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.PhysicalDamageDealtToChampions">
            <summary>
            Gets or sets the amount of physical damage dealt to champions.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.PhysicalDamageTaken">
            <summary>
            Gets or sets the amount of physical damage taken.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.QuadraKills">
            <summary>
            Gets or sets the number of quadra kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.SightWardsBoughtInGame">
            <summary>
            Gets or sets the number of sight wards purchased.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TeamObjective">
            <summary>
            Gets or sets the number of completed team objectives (i.e., quests) if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TimeCCingOthers">
            <summary>
            Gets or sets the time crowd controlling others.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalDamageDealt">
            <summary>
            Gets or sets the total damage dealt.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalDamageDealtToChampions">
            <summary>
            Gets or sets the total damage dealt to champions.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalDamageTaken">
            <summary>
            Gets or sets the total damage taken.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalHeal">
            <summary>
            Gets or sets the total heal amount.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalPlayerScore">
            <summary>
            Gets or sets the player's total score if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalScoreRank">
            <summary>
            Gets or sets the team rank of the player's total score (e.g., 1-5) if the game was a dominion game. This value is always 0 for non-dominion games.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalTimeCrowdControlDealt">
            <summary>
            Gets or sets the total dealt crowd control time.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TotalUnitsHealed">
            <summary>
            Gets or sets the total units healed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TowerKills">
            <summary>
            Gets or sets the number of tower kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TripleKills">
            <summary>
            Gets or sets the number of triple kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TrueDamageDealt">
            <summary>
            Gets or sets the amount of true damage dealt.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TrueDamageDealtToChampions">
            <summary>
            Gets or sets the amount of true damage dealt to champions.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TrueDamageTaken">
            <summary>
            Gets or sets the amount of true damage taken.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.TurretKills">
            <summary>
            Gets or sets the number of turret kills.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.UnrealKills">
            <summary>
            Gets or sets the amount of number of unreal kills (beyond pentakill).
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.VisionScore">
            <summary>
            Gets or sets the participant's vision score.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.VisionWardsBoughtInGame">
            <summary>
            Gets or sets the number of vision wards purchased.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.WardsKilled">
            <summary>
            Gets or sets the number of wards killed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.WardsPlaced">
            <summary>
            Gets or sets the number of wards placed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantStats.Win">
            <summary>
            Gets or sets a flag indicating whether or not the participant won.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchParticipantTimeline">
            <summary>
            This object contains all timeline information.
            Delta fields refer to values for the specified period (e.g., the gold per minute over the first 10 minutes of the game versus the second 20 minutes of the game).
            Diffs fields refer to the deltas versus the calculated lane opponent(s).
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.CreepsPerMinDeltas">
            <summary>
            Gets or sets creeps per minute timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.CsDiffPerMinDeltas">
            <summary>
            Gets or sets creep score difference per minute timeline data
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.DamageTakenDiffPerMinDeltas">
            <summary>
            Gets or sets damage taken difference per minute timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.DamageTakenPerMinDeltas">
            <summary>
            Gets or sets damage taken per minute timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.GoldPerMinDeltas">
            <summary>
            Gets or sets gold per minute timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.Lane">
            <summary>
            Gets or sets the participant's lane. This should equal one of the <see cref="T:RiotNet.Models.PlayerPosition"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.ParticipantId">
            <summary>
            Gets or sets the participant ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.Role">
            <summary>
            Gets or sets the participant's role. This should equal one of the <see cref="T:RiotNet.Models.MatchRole"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.XpDiffPerMinDeltas">
            <summary>
            Gets or sets experience difference per minute timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimeline.XpPerMinDeltas">
            <summary>
            Gets or sets experience per minute timeline data.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchParticipantTimelineData">
            <summary>
            This object contains timeline data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimelineData.ZeroToTen">
            <summary>
            Gets or sets the value per minute from the beginning of the game to 10 min.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimelineData.TenToTwenty">
            <summary>
            Gets or sets the value per minute from 10 min to 20 min.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchParticipantTimelineData.TwentyToThirty">
            <summary>
            Gets or sets the value per minute from 20 min to 30 min.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchPlayer">
            <summary>
            This object contains match player information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchPlayer.CurrentPlatformId">
            <summary>
            Gets or sets the platform ID of the player's account. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchPlayer.PlatformId">
            <summary>
            Gets or sets the platform ID of the player's account. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.
            </summary>
            <remarks>
            For old North America accounts, this may equal "NA" instead of "NA1".
            </remarks>
        </member>
        <member name="P:RiotNet.Models.MatchPlayer.CurrentAccountId">
            <summary>
            Gets or sets the player's account ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchPlayer.AccountId">
            <summary>
            Gets or sets the player's account ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchPlayer.MatchHistoryUri">
            <summary>
            Gets or sets the match history URI.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchPlayer.ProfileIcon">
            <summary>
            Gets or sets the profile icon ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchPlayer.SummonerId">
            <summary>
            Gets or sets the summoner ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchPlayer.SummonerName">
            <summary>
            Gets or sets the summoner name.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchReference">
            <summary>
            This object contains some basic match information. Used as a part of the Matchlist API in <see cref="T:RiotNet.Models.MatchList"/>.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.Champion">
            <summary>
            Gets or sets the ID for the champion played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.Lane">
            <summary>
            Gets or sets the participant's lane for the match. This should equal one of the <see cref="T:RiotNet.Models.PlayerPosition"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.GameId">
            <summary>
            Gets or sets the match ID (also referred to as Game ID).
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.PlatformId">
            <summary>
            Gets or sets the platform ID that the match was played on. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.Queue">
            <summary>
            Gets or sets the queue type for the match.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.Role">
            <summary>
            Gets or sets the participant's role. This should equal one of the <see cref="T:RiotNet.Models.MatchRole"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.Season">
            <summary>
            Gets or sets the season the match was played in.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchReference.Timestamp">
            <summary>
            Gets or sets the time the match was played, in UTC.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchTeam">
            <summary>
            Represents a team in a particular match.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.Bans">
            <summary>
            Gets or sets the banned champion data if the game was draft mode. For non-draft games, this will be null.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.BaronKills">
            <summary>
            Gets or sets the number of times the team killed baron.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.DominionVictoryScore">
            <summary>
            Gets or sets the points the team had at game end if the game was a dominion game, otherwise 0.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.DragonKills">
            <summary>
            Gets or sets the number of times the team killed dragon.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.FirstBaron">
            <summary>
            Gets or sets a flag indicating whether or not the team got the first baron kill.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.FirstBlood">
            <summary>
            Gets or sets a flag indicating whether or not the team got first blood.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.FirstDragon">
            <summary>
            Gets or sets a flag indicating whether or not the team got the first dragon kill.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.FirstInhibitor">
            <summary>
            Gets or sets a flag indicating whether or not the team destroyed the first inhibitor.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.FirstRiftHerald">
            <summary>
            Gets or sets the number of times the team killed the rift herald.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.FirstTower">
            <summary>
            Gets or sets a flag indicating whether or not the team destroyed the first tower.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.InhibitorKills">
            <summary>
            Gets or sets the number of inhibitors the team destroyed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.RiftHeraldKills">
            <summary>
            Gets or sets the number of times the team killed the rift herald.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.TeamId">
            <summary>
            Gets or sets the team ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.TowerKills">
            <summary>
            Gets or sets the number of towers the team destroyed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.VilemawKills">
            <summary>
            Gets or sets the number of times the team killed vilemaw.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.Win">
            <summary>
            Gets or sets a flag indicating whether or not the team won.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTeam.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.MatchTeam"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MatchTimeline">
            <summary>
            This object contains game timeline information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTimeline.FrameInterval">
            <summary>
            Gets or sets time between each returned frame.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTimeline.Frames">
            <summary>
            Gets or sets list of timeline frames for the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MatchTimeline.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.MatchTimeline"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Message">
            <summary>
            Represents a server incident message.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Message.Author">
            <summary>
            Gets or sets the message author.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Message.Content">
            <summary>
            Gets or sets the message content.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Message.CreatedAt">
            <summary>
            Gets or sets the created time (in UTC) for the message.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Message.Id">
            <summary>
            Gets or sets the message id.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Message.Severity">
            <summary>
            Gets or sets server incident message severity. This should equal one of the <see cref="T:RiotNet.Models.Severity"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Message.Translations">
            <summary>
            Gets or sets the list of translations of the message.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Message.UpdatedAt">
            <summary>
            Gets or sets the message updated time in UTC.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MetaData">
            <summary>
            Represents metadata for a rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MetaData.IsRune">
            <summary>
            Gets or sets whether the object is a rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MetaData.Tier">
            <summary>
            Gets or sets the tier of the rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MetaData.Type">
            <summary>
            Gets or sets the type of the rune.
            </summary>
        </member>
        <member name="T:RiotNet.Models.MiniSeries">
            <summary>
            Contains information about a promotion series.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MiniSeries.Losses">
            <summary>
            Gets or sets the number of losses in the current series.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MiniSeries.Progress">
            <summary>
            Gets or sets a string showing the current, sequential mini series progress where 'W' represents a win, 'L' represents a loss, and 'N' represents a game that hasn't been played yet.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MiniSeries.Target">
            <summary>
            Gets or sets the number of wins required for promotion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.MiniSeries.Wins">
            <summary>
            Gets or sets the number of wins in the current series.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Observer">
            <summary>
            Contains observer information (for spectator).
            </summary>
        </member>
        <member name="P:RiotNet.Models.Observer.EncryptionKey">
            <summary>
             Gets or sets the key used to decrypt the spectator grid game data for playback.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Participant">
            <summary>
            Contains information about a participant in a game that is in progress (or was in progress at the time the data was retrieved).
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.Bot">
            <summary>
             Gets or sets the flag indicating whether or not this participant is a bot.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.ChampionId">
            <summary>
             Gets or sets the ID of the champion played by this participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.ProfileIconId">
            <summary>
             Gets or sets the ID of the profile icon used by this participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.Spell1Id">
            <summary>
             Gets or sets the ID of the first summoner spell used by this participant. This corresponds to a <see cref="T:RiotNet.Models.StaticSummonerSpell"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.Spell2Id">
            <summary>
             Gets or sets the ID of the second summoner spell used by this participant. This corresponds to a <see cref="T:RiotNet.Models.StaticSummonerSpell"/> ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.SummonerName">
            <summary>
             Gets or sets the summoner name of this participant.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Participant.TeamId">
            <summary>
             Gets or sets the team ID of this participant.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Passive">
            <summary>
            Contains champion passive ability data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Passive.Description">
            <summary>
            Gets or sets the description of the passive.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Passive.Image">
            <summary>
            Gets or sets the image data for the passive's icon.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Passive.Name">
            <summary>
            Gets or sets the name of the passive.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Passive.SanitizedDescription">
            <summary>
            Gets or sets the sanitized description of the passive.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Perks">
            <summary>
            Contains information on the perks (runes) chosen by a participant in a match.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Perks.PerkStyle">
            <summary>
            Gets or sets the main perk style chosen.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Perks.PerkIds">
            <summary>
            Gets or sets the chosen perk IDs.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Perks.PerkSubStyle">
            <summary>
             Gets or sets the perk sub-style chosen.
            </summary>
        </member>
        <member name="T:RiotNet.Models.PersistableDictionary`2">
            <summary>
            Allows persisting of scalar values in a dictionary.
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary.</typeparam>
            <typeparam name="TValue">The type of values in the dictionary.</typeparam>
        </member>
        <member name="P:RiotNet.Models.PersistableDictionary`2.Value">
            <summary>
            Gets or sets the serialized form of the dictionary. This is used for saving the dictionary into a database. This property is not intended to be used by your code.
            </summary>      
        </member>
        <member name="T:RiotNet.Models.DictionaryOfBoolean">
            <summary>
            A dictionary with string keys and boolean values that can be stored in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.DictionaryOfString">
            <summary>
            A dictionary with string keys and string values that can be stored in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.PersistableList`1">
            <summary>
            Allows persisting of scalar values as a collection.
            </summary>
            <typeparam name="T">The type of elements in the list.</typeparam>
        </member>
        <member name="P:RiotNet.Models.PersistableList`1.Value">
            <summary>
            Gets or sets the serialized form of the list. This is used for saving the list into a database. This property is not intended to be used by your code.
            </summary>      
        </member>
        <member name="P:RiotNet.Models.PersistableList`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ListOfString">
            <summary>
            A list of strings that can be stored in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ListOfInt">
            <summary>
            A list of integers that can be stored in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ListOfLong">
            <summary>
            A list of long integers that can be stored in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ListOfDouble">
            <summary>
            A list of doubles that can be stored in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ListOfListOfDouble">
            <summary>
            A 2-dimensional list of doubles that can be stored in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Player">
            <summary>
            Basic info about a player in a game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Player.ChampionId">
            <summary>
             Gets or sets the champion id associated with player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Player.SummonerId">
            <summary>
             Gets or sets the summoner id associated with player.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Player.TeamId">
            <summary>
             Gets or sets the team id associated with player (team 1 or team 2).
            </summary>
        </member>
        <member name="P:RiotNet.Models.Player.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.Player"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Position">
            <summary>
            This object contains participant frame position information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Position.X">
            <summary>
            Gets or sets participant X position.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Position.Y">
            <summary>
            Gets or sets participant Y position.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Recommended">
            <summary>
            Represents a recommended item set.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.Blocks">
            <summary>
            Gets or sets the blocks (or groups of items) in this item set.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.Champion">
            <summary>
            Gets or sets the champion name for the current item set.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.Map">
            <summary>
            Gets or sets the map for which the current item set applies.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.Mode">
            <summary>
            Gets or sets the game mode for which the current item set applies.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.Priority">
            <summary>
            Indicates whether this item set takes priority. This appears to be false for all item sets except Ashe's recommended items in the tutorial.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.Title">
            <summary>
            Gets or sets the title of the item set.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.Type">
            <summary>
            Gets or sets the type of item set. This value appears to always equal "riot".
            </summary>
        </member>
        <member name="P:RiotNet.Models.Recommended.DatabaseId">
            <summary>
            Gets or sets the ID of the current item set. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Rune">
            <summary>
            Represents a rune on a player's rune page.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Rune.Count">
            <summary>
            Gets or sets number of instances of the rune used on the rune page. This is equal to Rank, but it is set by the Spectator API.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Rune.Rank">
            <summary>
            Gets or sets number of instances of the rune used on the rune page. This is equal to Count, but it is set by the Match API.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Rune.RuneId">
            <summary>
            Gets or sets rune ID. This corresponds to the ID of a <see cref="T:RiotNet.Models.StaticRune"/>.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Rune.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.Rune"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.RuneDataStats">
            <summary>
            Represents stats of a rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatArmorModPerLevel">
            <summary>
            Gets the flat armor added per level to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatArmorPenetrationMod">
            <summary>
            Gets the flat armor penetration added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatArmorPenetrationModPerLevel">
            <summary>
            Gets the flat armor added per level to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatCritChanceModPerLevel">
            <summary>
            Gets the flat critical strike chance per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatCritDamageModPerLevel">
            <summary>
            Gets the flat critical strike damage per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatDodgeMod">
            <summary>
            Gets the flat dodge chance added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatDodgeModPerLevel">
            <summary>
            Gets the flat dodge chance per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatEnergyModPerLevel">
            <summary>
            Gets the flat energy per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatEnergyRegenModPerLevel">
            <summary>
            Gets the flat energy regeneration per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatGoldPer10Mod">
            <summary>
            Gets the gold per 10 seconds added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatHPModPerLevel">
            <summary>
            Gets the flat health per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatHPRegenModPerLevel">
            <summary>
            Gets the flat health regen per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatMPModPerLevel">
            <summary>
            Gets the flat mana per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatMPRegenModPerLevel">
            <summary>
            Gets the flat mana regeneration per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatMagicDamageModPerLevel">
            <summary>
            Gets the flat ability power per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatMagicPenetrationMod">
            <summary>
            Gets the flat magic penetration added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatMagicPenetrationModPerLevel">
            <summary>
            Gets the flat magic penetration per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatMovementSpeedModPerLevel">
            <summary>
            Gets the flat movement speed per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatPhysicalDamageModPerLevel">
            <summary>
            Gets the flat attack damage per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatSpellBlockModPerLevel">
            <summary>
            Gets the flat spell block per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatTimeDeadMod">
            <summary>
            Gets the flat time spent dead subtracted from the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.FlatTimeDeadModPerLevel">
            <summary>
            Gets the flat time spent dead per level subtracted from the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.PercentArmorPenetrationMod">
            <summary>
            Gets the percent armor penetration per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.PercentArmorPenetrationModPerLevel">
            <summary>
            Gets the percent armor penetration per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.PercentAttackSpeedModPerLevel">
            <summary>
            Gets the percent attack speed per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.PercentCooldownMod">
            <summary>
            Gets the percent cooldown reduction added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.PercentCooldownModPerLevel">
            <summary>
            Gets the percent cooldown reduction per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.PercentMagicPenetrationMod">
            <summary>
            Gets the percent magic penetration added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.PercentMagicPenetrationModPerLevel">
            <summary>
            Gets the percent magic penetration per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.PercentMovementSpeedModPerLevel">
            <summary>
            Gets the percent movement speed per level added to the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.PercentTimeDeadMod">
            <summary>
            Gets the percent time spent dead subtracted from the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.RuneDataStats.PercentTimeDeadModPerLevel">
            <summary>
            Gets the percent time spent per level dead subtracted from the target's stats. This value is only set for runes.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Service">
            <summary>
            Represents server services.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Service.Incidents">
            <summary>
            Gets or sets list of service incidents.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Service.Name">
            <summary>
            Gets or sets the service name.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Service.Slug">
            <summary>
            Gets or sets the service tag name.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Service.Status">
            <summary>
            Gets or sets service status. This should equal one of the <see cref="T:RiotNet.Models.ServerStatus"/> values.
            </summary>
        </member>
        <member name="T:RiotNet.Models.ShardStatus">
            <summary>
            Represents detailed server information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ShardStatus.Hostname">
            <summary>
            Gets or sets the server hostname.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ShardStatus.Locales">
            <summary>
            Gets or sets the list of locales for the server.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ShardStatus.Name">
            <summary>
            Gets or sets the name for the server.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ShardStatus.RegionTag">
            <summary>
            Gets or sets the region tag for the server. This is similar to the platform ID, but it is not set for all regions.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ShardStatus.Services">
            <summary>
            Gets or sets list of server services.
            </summary>
        </member>
        <member name="P:RiotNet.Models.ShardStatus.Slug">
            <summary>
            Gets or sets the region name (ex. "na").
            </summary>
        </member>
        <member name="T:RiotNet.Models.Skin">
            <summary>
            Contains champion skin data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Skin.Id">
            <summary>
            Gets or sets the skin ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Skin.Name">
            <summary>
            Gets or sets the skin name.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Skin.Num">
            <summary>
            Gets or sets the skin number.
            </summary>
        </member>
        <member name="T:RiotNet.Models.SpellVars">
            <summary>
            Contains spell data for a single rank of a spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.SpellVars.Coeff">
            <summary>
            Gets or sets the scaling coefficients for the current spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.SpellVars.Dyn">
            <summary>
            Gets or sets the special operator for this spell variable.
            </summary>
        </member>
        <member name="P:RiotNet.Models.SpellVars.Key">
            <summary>
            Gets or sets the key used to reference this spell variable in calculations.
            </summary>
        </member>
        <member name="P:RiotNet.Models.SpellVars.Link">
            <summary>
            Gets or sets the property that the scaling coefficients apply to.
            </summary>
        </member>
        <member name="P:RiotNet.Models.SpellVars.RanksWith">
            <summary>
            Gets or sets the ability with which this spell variable ranks up. If unspecified, it ranks up with the current ability.
            </summary>
        </member>
        <member name="P:RiotNet.Models.SpellVars.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.SpellVars"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticChampion">
            <summary>
            Contains champion data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.AllyTips">
            <summary>
            Gets or sets a list of tips for how to play as this champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Blurb">
            <summary>
            Gets or sets the blurb describing the champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.EnemyTips">
            <summary>
            Gets or sets a list of tips for how to play against this champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Id">
            <summary>
            Gets or sets the champion ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Image">
            <summary>
            Gets or sets the champion image data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Info">
            <summary>
            Gets or sets the strength and difficulty information for the current champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Key">
            <summary>
            Gets or sets the champion key.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Lore">
            <summary>
            Gets or sets the champion's lore text.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Name">
            <summary>
            Gets or sets the champion name.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.ParType">
            <summary>
            Gets or sets the type of resource this champion uses (e.g. Mana).
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Passive">
            <summary>
            Gets or sets the champion's passive ability.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Recommended">
            <summary>
            Gets or sets the champion's recommended item sets.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Skins">
            <summary>
            Gets or sets the available skins for the champion.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Spells">
            <summary>
            Gets or sets the champion's spells.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Stats">
            <summary>
            Gets or sets the champion's stats.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Tags">
            <summary>
            Gets or sets the champion's roles (e.g. Fighter, Tank).
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampion.Title">
            <summary>
            Gets or sets the champion's title.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticChampionInfo">
            <summary>
            Contains champion strength and difficulty information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionInfo.Attack">
            <summary>
            Gets or sets the champion's attack power.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionInfo.Magic">
            <summary>
            Gets or sets the champion's magic power.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionInfo.Defense">
            <summary>
            Gets or sets the champion's defense power.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionInfo.Difficulty">
            <summary>
            Gets or sets the champion's difficulty.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticChampionList">
            <summary>
            Contains champion list data.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticChampionList.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticChampionList"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionList.Format">
            <summary>
            Gets or sets the format.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionList.Keys">
            <summary>
            Gets or sets the keys. This maps champion IDs to champion names.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticChampionSpell">
            <summary>
            Contains champion spell data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionSpell.AltImages">
            <summary>
            Gets or sets the alternate image data for the current ability.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticChampionSpell.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.StaticChampionSpell"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticDataList`1">
            <summary>
            The base class for a list of data points.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticDataList`1.Type">
            <summary>
            Gets or sets the type of list.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticDataList`1.Version">
            <summary>
            Gets or sets the game version to which the item list applies.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticDataList`1.Data">
            <summary>
            Gets or sets the data indexed by name or ID.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticItem">
            <summary>
            Represents an item that a player can use during a match.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.Colloq">
            <summary>
            Gets or sets a semicolon-separated list of abbreviations that can be used for searching for the item.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.ConsumeOnFull">
            <summary>
            Gets or sets whether the item should automatically be consumed upon purchase if the player's item slots are full.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.Consumed">
            <summary>
            Gets or sets whether the item is consumable.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.Depth">
            <summary>
            Gets or sets the depth of the recipe for this item.
            </summary>
            <remarks>
            An item's depth is equal to the maximum depth of the items that it builds out of, plus one.
            </remarks>
        </member>
        <member name="P:RiotNet.Models.StaticItem.Effect">
            <summary>
            Gets or sets the effect of the item.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.From">
            <summary>
            Gets or sets the list of items that this item builds out of.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.Gold">
            <summary>
            Gold cost information for the item. Does not apply to runes.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.Group">
            <summary>
            Gets or sets the group to which the item/rune belongs.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.HideFromAll">
            <summary>
            Gets or sets whether the item is hidden when searching. This is usually used for enchantments (such as homeguard).
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.InStore">
            <summary>
            Gets or sets whether the item exists in the store.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.Into">
            <summary>
            Gets or sets the list of items that this item can build into.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.Maps">
            <summary>
            Gets or sets the maps that the item is used on, indexed by map ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.PlainText">
            <summary>
            Gets or sets the plain text of the item/rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.RequiredChampion">
            <summary>
            Gets or sets the name of the only champion that is allowed to have this item.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.SpecialRecipe">
            <summary>
            Gets or sets the ID of the item that this item builds from using a special rule (e.g. Archangel's Staff into Seraph's Embrace).
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItem.Stacks">
            <summary>
            Gets or sets the maximum number of instances of this item that can exist in a single inventory slot.
            </summary>
            <remarks>
            Some items have a "stacks" value of 0. I'm not sure why, but I think 0 should be treated as if it was 1.
            </remarks>
        </member>
        <member name="P:RiotNet.Models.StaticItem.Stats">
            <summary>
            Gets or sets the stats that the item applies.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticItemList">
            <summary>
            Contains item list data.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticItemList.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticItemList"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItemList.Groups">
            <summary>
            Gets or sets the list of groups, which define the maximum number of items of certain types that a player can own.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItemList.Tree">
            <summary>
            Gets or sets the item tree data.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticItemTree">
            <summary>
            Contains item tree data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItemTree.Header">
            <summary>
            Gets or sets the item tree header.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItemTree.Tags">
            <summary>
            Gets or sets the item tree tags.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticItemTree.DatabaseId">
            <summary>
            Gets or sets the ID of the current <see cref="T:RiotNet.Models.StaticItemTree"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticLanuageStrings">
            <summary>
            Contains strings in a specified language.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticLanuageStrings.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticLanuageStrings"/> instance.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticMapDetails">
            <summary>
            Contains data for a map (e.g. Summoner's Rift).
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMapDetails.Image">
            <summary>
            Gets or sets data for the map's image.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMapDetails.MapId">
            <summary>
            Gets or sets the map ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMapDetails.MapName">
            <summary>
            Gets or sets the name of the map.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMapDetails.UnpurchasableItemList">
            <summary>
            Gets or sets the list of item IDs for items that cannot be purchased on this map. NOTE: the Riot API never seems to set this property, so it is always empty.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticMapList">
            <summary>
            Contains data for multiple maps.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticMapList.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticMapList"/> instance.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticMastery">
            <summary>
            Represents a mastery slot.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.Id">
            <summary>
            Gets or sets the mastery ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.Description">
            <summary>
            Gets or sets the description of the mastery at each rank.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.Image">
            <summary>
            Gets or sets the image data for the mastery's icon.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.MasteryTree">
            <summary>
            Gets or sets the type of mastery tree that the current <see cref="T:RiotNet.Models.StaticMastery"/> belongs to. This should equal one of the <see cref="T:RiotNet.Models.MastertyTreeType"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.Name">
            <summary>
            Gets or sets the name of the mastery.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.Prereq">
            <summary>
            Gets or sets the ID of the mastery that must be filled before any points can be added to the current mastery. A value of zero indicates no prerequisites.
            Season 6-7 do not have any masteries with prerequisites.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.Ranks">
            <summary>
            Gets or sets the maximum number of ranks that the mastery has.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMastery.SanitizedDescription">
            <summary>
            Gets or sets the sanitized description of the mastery at each rank.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticMasteryList">
            <summary>
            Contains mastery list data.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticMasteryList.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticMasteryList"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryList.Tree">
            <summary>
            Gets or sets the mastery tree structure.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticMasteryTree">
            <summary>
            Represents a mastery tree.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTree.Cunning">
            <summary>
            Gets or sets the Cunning mastery tree.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTree.Ferocity">
            <summary>
            Gets or sets the Ferocity mastery tree.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTree.Resolve">
            <summary>
            Gets or sets the Resolve mastery tree.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTree.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.StaticMasteryTree"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticMasteryTreeItem">
            <summary>
            Represents one item in a mastery tree list.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTreeItem.MasteryId">
            <summary>
            Gets or sets the mastery ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTreeItem.Prereq">
            <summary>
            Gets or sets the ID of the mastery that must be filled before any points can be added to the current mastery. A value of zero indicates no prerequisites.
            Season 6-7 do not have any masteries with prerequisites.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTreeItem.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.StaticMasteryTreeItem"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticMasteryTreeList">
            <summary>
            Represents one row in a mastery tree.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTreeList.MasteryTreeItems">
            <summary>
            Gets or sets the items in the current <see cref="T:RiotNet.Models.StaticMasteryTreeList"/>.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticMasteryTreeList.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.StaticMasteryTreeList"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticProfileIcon">
            <summary>
            Contains data for a profile icon.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticProfileIcon.Id">
            <summary>
            Gets or sets the mastery ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticProfileIcon.Image">
            <summary>
            Gets or sets the image data.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticProfileIconData">
            <summary>
            Contains profile icon data.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticProfileIconData.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticProfileIconData"/> instance.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticRealm">
            <summary>
            Contains realm data. This is mainly version numbers related to Dragon Magic.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.Cdn">
            <summary>
            Gets or sets the base CDN URL.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.Css">
            <summary>
            Gets or sets the latest changed version of Dragon Magic's css file.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.Dd">
            <summary>
            Gets or sets the latest changed version of Dragon Magic.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.L">
            <summary>
            Gets or sets the default language for this realm.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.Lg">
            <summary>
            Gets or sets the legacy script mode for IE6 or older.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.N">
            <summary>
            Gets or sets the latest changed version for each data type listed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.ProfileIconMax">
            <summary>
            Gets or sets the special behavior number identifying the largest profile icon id that can be used under 500. Any profileicon that is requested between this number and 500 should be mapped to 0.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.Store">
            <summary>
            Gets or sets additional API data drawn from other sources that may be related to data dragon functionality.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.V">
            <summary>
            Gets or sets the current version of this realm.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRealm.DatabaseId">
            <summary>
            Gets or sets the ID of the <see cref="T:RiotNet.Models.StaticRealm"/>. This does NOT come from the Riot API; it is used as a key when storing this object in a database.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticRune">
            <summary>
            Represents a rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRune.Rune">
            <summary>
            Gets or sets the metadata for the rune.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticRune.Stats">
            <summary>
            Gets or sets the stats that the rune applies.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticRuneList">
            <summary>
            Contains rune list data.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticRuneList.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticRuneList"/> instance.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticSpell">
            <summary>
            The base class for a champion ability or summoner spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Cooldown">
            <summary>
            Gets or sets the cooldowns of this spell at each rank.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.CooldownBurn">
            <summary>
            Gets or sets the cooldown at all ranks merged into a single string.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Cost">
            <summary>
            Gets or sets the mana (or other resource) cost of the spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.CostBurn">
            <summary>
            Gets or sets the cost at all ranks merged into a single string.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.CostType">
            <summary>
            Gets or sets the type of resource that this spell costs.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Description">
            <summary>
            Gets or sets the description of the spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Effect">
            <summary>
            Gets or sets the effect of the spell at each rank.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.EffectBurn">
            <summary>
            Gets or sets the effects at all ranks, merged into a single string for each effect.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Image">
            <summary>
            Gets or sets the image data for the current spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Key">
            <summary>
            Gets or sets the key of the current spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.LevelTip">
            <summary>
            Gets or sets the level-up tooltip of the current spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.MaxRank">
            <summary>
            Gets or sets the maximum number of points that a player can put into this spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Name">
            <summary>
            Gets or sets the name of the spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Range">
            <summary>
            Gets or sets the range of the spell at each rank. A list with a single entry of 0 indicates that the spell is self-cast.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.RangeBurn">
            <summary>
            Gets or sets the range at all ranks merged into a single string.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Resource">
            <summary>
            Gets or sets the cost and type of resource that the spell uses.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.SanitizedDescription">
            <summary>
            Gets or sets the sanitized descrption of the spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.SanitizedTooltip">
            <summary>
            Gets or sets the sanitized spell tooltip.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Tooltip">
            <summary>
            Gets or sets the spell tooltip.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSpell.Vars">
            <summary>
            Gets or sets the scaling coefficients of the spell.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticSpell.IsSelfCast">
            <summary>
            Gets whether the spell is self-cast.
            </summary>
            <returns></returns>
        </member>
        <member name="T:RiotNet.Models.StaticSummonerSpell">
            <summary>
            Represents a summoner spell.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSummonerSpell.Id">
            <summary>
            Gets or sets the summoner spell ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSummonerSpell.Modes">
            <summary>
            Gets or sets the list of game modes in which the current summoner spell is allowed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.StaticSummonerSpell.SummonerLevel">
            <summary>
            Gets or sets the summoner level required to use this spell.
            </summary>
        </member>
        <member name="T:RiotNet.Models.StaticSummonerSpellList">
            <summary>
            Contains summoner spell data.
            </summary>
        </member>
        <member name="M:RiotNet.Models.StaticSummonerSpellList.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.Models.StaticRuneList"/> instance.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Stats">
            <summary>
            Contains champion stats data.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.Armor">
            <summary>
            Gets or sets the champion's base armor.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.ArmorPerLevel">
            <summary>
            Gets or sets the champion's armor per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.AttackDamage">
            <summary>
            Gets or sets the champion's base attack damage.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.AttackDamagePerLevel">
            <summary>
            Gets or sets the champion's attack damage per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.AttackRange">
            <summary>
            Gets or sets the champion's base attack range.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.AttackSpeedOffset">
            <summary>
            Gets or sets the champion's attack speed offset.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.AttackSpeedPerLevel">
            <summary>
            Gets or sets the champion's attack speed per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.Crit">
            <summary>
            Gets or sets the champion's base critical strike chance.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.CritPerLevel">
            <summary>
            Gets or sets the champion's critical strike chance per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.HP">
            <summary>
            Gets or sets the champion's base health.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.HPPerLevel">
            <summary>
            Gets or sets the champion's health per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.HPRegen">
            <summary>
            Gets or sets the champion's base health regen.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.HPRegenPerLevel">
            <summary>
            Gets or sets the champion's health regen per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.MoveSpeed">
            <summary>
            Gets or sets the champion's base move speed.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.MP">
            <summary>
            Gets or sets the champion's base mana.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.MPPerLevel">
            <summary>
            Gets or sets the champion's mana per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.MPRegen">
            <summary>
            Gets or sets the champion's base mana regen.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.MPRegenPerLevel">
            <summary>
            Gets or sets the champion's mana regen per level.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.SpellBlock">
            <summary>
            Gets or sets the champion's base magic resist.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Stats.SpellBlockPerLevel">
            <summary>
            Gets or sets the champion's magic resist per level.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Summoner">
            <summary>
            Contains summoner information.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Summoner.Id">
            <summary>
            Gets or sets the summoner ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Summoner.Puuid">
            <summary>
            Gets or sets the player universally unique identifier (PUUID)
            </summary>
        </member>
        <member name="P:RiotNet.Models.Summoner.AccountId">
            <summary>
            Gets or sets the summoner's account ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Summoner.Name">
            <summary>
            Gets or sets the summoner's name.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Summoner.ProfileIconId">
            <summary>
            Gets or sets the ID of the summoner's profile icon.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Summoner.RevisionDate">
            <summary>
            Gets or sets the date and time (in UTC) when the summoner was last modified.
            The summoner is modified by the following events: changing summoner icon,
            playing a tutorial, finishing a game, or changing summoner name.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Summoner.SummonerLevel">
            <summary>
            Gets or sets the summoner's level.
            </summary>
        </member>
        <member name="T:RiotNet.Models.TournamentCode">
            <summary>
            Contains information about a tournament code.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.Code">
            <summary>
             Gets or sets the tournament code.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.Id">
            <summary>
             Gets or sets tournament code ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.LobbyName">
            <summary>
             Gets or sets the name of the lobby for the tournament code game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.Map">
            <summary>
             Gets or sets the map on which the tournament code game will be played. This should equal one of the <see cref="T:RiotNet.Models.MapType"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.MetaData">
            <summary>
             Gets or sets the metadata for the tournament code game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.Participants">
            <summary>
             Gets or sets the IDs of the summoners who are allowed to participate in the game.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.Password">
            <summary>
             Gets or sets the lobby password.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.PickType">
            <summary>
            Gets or sets the method used for picking champions. This should equal one of the <see cref="P:RiotNet.Models.TournamentCode.PickType"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.ProviderId">
            <summary>
             Gets or sets the provider ID.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.Region">
            <summary>
             Gets or sets the region in which the game is played.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.Spectators">
            <summary>
             Gets or sets the spectator type for the game. This should equal one of the <see cref="T:RiotNet.Models.SpectatorType"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.TeamSize">
            <summary>
             Gets or sets the number of players per team.
            </summary>
        </member>
        <member name="P:RiotNet.Models.TournamentCode.TournamentId">
            <summary>
             Gets or sets the tournament ID.
            </summary>
        </member>
        <member name="T:RiotNet.Models.Translation">
            <summary>
            Represents a message translation.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Translation.Content">
            <summary>
            Gets or sets the translation content.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Translation.Locale">
            <summary>
            Gets or sets the translation locale.
            </summary>
        </member>
        <member name="P:RiotNet.Models.Translation.UpdatedAt">
            <summary>
            Gets or sets the last translation update time in UTC.
            </summary>
        </member>
        <member name="T:RiotNet.NotFoundException">
            <summary>
            Represents an error that occurs when a REST request fails because the requested resource was not found.
            </summary>
        </member>
        <member name="M:RiotNet.NotFoundException.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.NotFoundException"/> instance.
            </summary>
        </member>
        <member name="M:RiotNet.NotFoundException.#ctor(RiotNet.RiotResponse)">
            <summary>
            Creates a new <see cref="T:RiotNet.NotFoundException"/> instance.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:RiotNet.NotFoundException.#ctor(RiotNet.RiotResponse,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.NotFoundException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.NotFoundException.#ctor(RiotNet.RiotResponse,System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.NotFoundException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RiotNet.NotFoundException.#ctor(RiotNet.RiotResponse,System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.NotFoundException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.NotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:RiotNet.NotFoundException"/> instance.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:RiotNet.IRateLimiter">
            <summary>
            Handles proactive rate limiting. You should only ever create one instance of this interface.
            </summary>
        </member>
        <member name="M:RiotNet.IRateLimiter.TrySetRules(System.Collections.Generic.IEnumerable{RiotNet.RateLimitRule},System.String,System.Collections.Generic.IEnumerable{RiotNet.RateLimitRule})">
            <summary>
            Adds application-level rate limiting rules if they have not been added already.
            </summary>
            <param name="rules">The list of rules.</param>
            <param name="platformId">The platform ID of the response that contained the rate limit definitions. The request count will automatically be incremented for this platform.</param>
            <param name="currentCounts">The current request counts for each rule. If unspecified, 1 request for each rule will be assumed.</param>
        </member>
        <member name="M:RiotNet.IRateLimiter.TrySetRules(System.Collections.Generic.IEnumerable{RiotNet.RateLimitRule},System.String,System.String,System.Collections.Generic.IEnumerable{RiotNet.RateLimitRule})">
            <summary>
            Adds method-level rate limiting rules if they have not been added already.
            </summary>
            <param name="rules">The list of rules.</param>
            <param name="methodName">The name of the method that is executing.</param>
            <param name="platformId">The platform ID of the response that contained the rate limit definitions. The request count will automatically be incremented for this platform.</param>
            <param name="currentCounts">The current request counts for each rule. If unspecified, 1 request for each rule will be assumed.</param>
        </member>
        <member name="P:RiotNet.IRateLimiter.HasRules">
            <summary>
            Gets whether the rate limiter has any application-level rules set.
            </summary>
        </member>
        <member name="M:RiotNet.IRateLimiter.AddRequestOrGetDelay(System.String,System.String)">
            <summary>
            Increments the request count, or if the rate limit is reached, gets the time (in UTC) until which the client should wait before sending a request.
            </summary>
            <param name="methodName">The name of the method that is executing.</param>
            <param name="platformId">The platform ID of the default server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.</param>
            <returns>The wait time, or DateTime.MinValue if no delay is required.</returns>
            <remarks>
            Implementations of this function must be thread-safe.
            </remarks>
        </member>
        <member name="T:RiotNet.RateLimitRule">
            <summary>
            Represents a single rule of a rate limit.
            </summary>
        </member>
        <member name="F:RiotNet.RateLimitRule.Duration">
            <summary>
            The duration of the rate limit, in seconds.
            </summary>
        </member>
        <member name="F:RiotNet.RateLimitRule.Limit">
            <summary>
            The maximum number of requests that can be sent within the period.
            </summary>
        </member>
        <member name="T:RiotNet.RateLimiter">
            <summary>
            Handles proactive rate limiting. You should only ever create one instance of this class.
            </summary>
        </member>
        <member name="M:RiotNet.RateLimiter.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.RateLimiter"/> instance.
            </summary>
        </member>
        <member name="M:RiotNet.RateLimiter.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:RiotNet.RateLimiter"/> instance.
            </summary>
            <param name="rateLimitPerTenSeconds">Your API key's rate limit per 10 seconds.</param>
            <param name="rateLimitPerTenMinutes">Your API key's rate limit per 10 minutes.</param>
        </member>
        <member name="M:RiotNet.RateLimiter.TrySetRules(System.Collections.Generic.IEnumerable{RiotNet.RateLimitRule},System.String,System.Collections.Generic.IEnumerable{RiotNet.RateLimitRule})">
            <summary>
            Adds application-level rate limiting rules if they have not been added already.
            </summary>
            <param name="rules">The list of rules.</param>
            <param name="platformId">The platform ID of the response that contained the rate limit definitions. The request count will automatically be incremented for this platform.</param>
            <param name="currentCounts">The current request counts for each rule. If unspecified, 1 request for each rule will be assumed.</param>
        </member>
        <member name="M:RiotNet.RateLimiter.TrySetRules(System.Collections.Generic.IEnumerable{RiotNet.RateLimitRule},System.String,System.String,System.Collections.Generic.IEnumerable{RiotNet.RateLimitRule})">
            <summary>
            Adds method-level rate limiting rules if they have not been added already.
            </summary>
            <param name="rules">The list of rules.</param>
            <param name="methodName">The name of the method that is executing.</param>
            <param name="platformId">The platform ID of the response that contained the rate limit definitions. The request count will automatically be incremented for this platform.</param>
            <param name="currentCounts">The current request counts for each rule. If unspecified, 1 request for each rule will be assumed.</param>
        </member>
        <member name="P:RiotNet.RateLimiter.HasRules">
            <summary>
            Gets whether the rate limiter has any rules set.
            </summary>
            <returns>True if any rules have been added, otherwise false.</returns>
        </member>
        <member name="M:RiotNet.RateLimiter.AddRequestOrGetDelay(System.String,System.String)">
            <summary>
            Increments the request count, or if the rate limit is reached, gets the time (in UTC) until which the client should wait before sending a request.
            </summary>
            <param name="methodName">The name of the method that is executing.</param>
            <param name="platformId">The platform ID of the default server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.</param>
            <returns>The wait time, or DateTime.MinValue if no delay is required.</returns>
        </member>
        <member name="T:RiotNet.RateLimiter.RequestCount">
            <summary>
            Represents a request count for a rate limiting rule.
            </summary>
        </member>
        <member name="F:RiotNet.RateLimiter.RequestCount.Count">
            <summary>
            The number of requests sent since the last reset.
            </summary>
        </member>
        <member name="F:RiotNet.RateLimiter.RequestCount.ResetTime">
            <summary>
            The time in UTC when the request count should reset.
            </summary>
        </member>
        <member name="T:RiotNet.RateLimiter.RateLimitTracker">
            <summary>
            Represents a request count for a rate limiting rule.
            </summary>
        </member>
        <member name="F:RiotNet.RateLimiter.RateLimitTracker.Rule">
            <summary>
            The rule being tracked.
            </summary>
        </member>
        <member name="F:RiotNet.RateLimiter.RateLimitTracker.RequestCounts">
            <summary>
            The list of recent request counts for each PlatformId.
            </summary>
        </member>
        <member name="M:RiotNet.RateLimiter.RateLimitTracker.GetDelayTime(System.String,System.DateTime)">
            <summary>
            Gets the time to delay until for a single rate limit rule.
            </summary>
            <param name="platformId">The platform ID of the default server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.</param>
            <param name="now">The current time in UTC.</param>
            <returns>The time to delay until.</returns>
        </member>
        <member name="T:RiotNet.RateLimitExceededException">
            <summary>
            Represents an error that occurs when a REST request fails because the rate limit has been exceeded.
            </summary>
        </member>
        <member name="M:RiotNet.RateLimitExceededException.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.RateLimitExceededException"/> instance.
            </summary>
        </member>
        <member name="M:RiotNet.RateLimitExceededException.#ctor(RiotNet.RiotResponse)">
            <summary>
            Creates a new <see cref="T:RiotNet.RateLimitExceededException"/> instance.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:RiotNet.RateLimitExceededException.#ctor(RiotNet.RiotResponse,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.RateLimitExceededException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.RateLimitExceededException.#ctor(RiotNet.RiotResponse,System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.RateLimitExceededException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RiotNet.RateLimitExceededException.#ctor(RiotNet.RiotResponse,System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.RateLimitExceededException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.RateLimitExceededException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:RiotNet.RateLimitExceededException"/> instance.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:RiotNet.ReflectionUtils">
            <summary>
            Contains reflection-related helper methods.
            </summary>
        </member>
        <member name="M:RiotNet.ReflectionUtils.GetListInterface(System.Type)">
            <summary>
            Gets the IList&lt;&gt; interface that the type implements, if any.
            </summary>
            <param name="type">The type of object that implements the interface.</param>
            <returns>The first IList&lt;&gt; interface found, or null if no interface was found.</returns>
        </member>
        <member name="M:RiotNet.ReflectionUtils.GetGenericInterface(System.Type,System.Type)">
            <summary>
            Gets the interface that a type implements that matches the specified generic interface definition.
            </summary>
            <param name="type">The type of object that implements the interface.</param>
            <param name="genericInterfaceDefinition">A generic type definition for an interface (e.g. typeof(IEnumerable&lt;&gt;)).</param>
            <returns>The first interface found that matches the generic interface definition, or null if no match was found.</returns>
        </member>
        <member name="M:RiotNet.ReflectionUtils.IsSubclassOfGenericTypeDefinition(System.Type,System.Type)">
            <summary>
            Gets whether the specified type is a subclass of a generic type represented by the specified generic type definition.
            </summary>
            <param name="objectType">The type to check.</param>
            <param name="genericTypeDefinition">A generic type definition (e.g. typeof(List&lt;&gt;))</param>
            <returns>A value that indicates whether the type is a subclass of the generic type definition.</returns>
        </member>
        <member name="T:RiotNet.ResponseEventHandler">
            <summary>
            Represents a method that will handle an event that contains response data.
            </summary>
            <param name="sender">The object that created the event.</param>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="T:RiotNet.ResponseEventArgs">
            <summary>
            Contains event data for an event that contains an HTTP response.
            </summary>
        </member>
        <member name="M:RiotNet.ResponseEventArgs.#ctor(RiotNet.RiotResponse,System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.ResponseEventArgs"/> instance.
            </summary>
            <param name="response">The response for the request that caused the event.</param>
            <param name="errorMessage">The error message contained in te response, if any.</param>
        </member>
        <member name="P:RiotNet.ResponseEventArgs.Response">
            <summary>
            Gets the response for the request that caused the event.
            </summary>
        </member>
        <member name="P:RiotNet.ResponseEventArgs.ErrorMessage">
            <summary>
            Gets the error message contained in te response, if any.
            </summary>
        </member>
        <member name="T:RiotNet.RestException">
            <summary>
            Represents an error that occurred during a REST request.
            </summary>
        </member>
        <member name="M:RiotNet.RestException.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.RestException"/> instance.
            </summary>
        </member>
        <member name="M:RiotNet.RestException.#ctor(RiotNet.RiotResponse)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestException"/> instance.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:RiotNet.RestException.#ctor(RiotNet.RiotResponse,System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RiotNet.RestException.#ctor(RiotNet.RiotResponse,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.RestException.#ctor(RiotNet.RiotResponse,System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.RestException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestException"/> instance.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:RiotNet.RestException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the SerializationInfo with information about the exception.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:RiotNet.RestException.Response">
            <summary>
            Gets the response.
            </summary>
        </member>
        <member name="T:RiotNet.RestTimeoutException">
            <summary>
            Represents an error that occurs when a REST request fails because it timed out or was cancelled.
            </summary>
        </member>
        <member name="M:RiotNet.RestTimeoutException.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.RestTimeoutException"/> instance.
            </summary>
        </member>
        <member name="M:RiotNet.RestTimeoutException.#ctor(RiotNet.RiotResponse)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestTimeoutException"/> instance.
            </summary>
            <param name="response">The response.</param>
        </member>
        <member name="M:RiotNet.RestTimeoutException.#ctor(RiotNet.RiotResponse,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestTimeoutException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.RestTimeoutException.#ctor(RiotNet.RiotResponse,System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestTimeoutException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
        </member>
        <member name="M:RiotNet.RestTimeoutException.#ctor(RiotNet.RiotResponse,System.String,System.Exception)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestTimeoutException"/> instance.
            </summary>
            <param name="response">The response.</param>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:RiotNet.RestTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Creates a new <see cref="T:RiotNet.RestTimeoutException"/> instance.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:RiotNet.RetryEventHandler">
            <summary>
            Represents a method that will handle an event that could trigger a retry of a request.
            </summary>
            <param name="sender">The object that created the event.</param>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="T:RiotNet.RetryEventArgs">
            <summary>
            Contains event data for an error that could trigger a retry of a request.
            </summary>
        </member>
        <member name="M:RiotNet.RetryEventArgs.#ctor(RiotNet.RiotResponse,System.Int32)">
            <summary>
            Creates a new <see cref="T:RiotNet.RetryEventArgs"/> instance.
            </summary>
            <param name="response">The response for the request that caused the event.</param>
            <param name="attemptCount">The number of times that the same request has been attempted.</param>
        </member>
        <member name="P:RiotNet.RetryEventArgs.AttemptCount">
            <summary>
            Gets the number of times that the same request has been attempted.
            </summary>
        </member>
        <member name="P:RiotNet.RetryEventArgs.Retry">
            <summary>
            Gets or sets whether the sender should retry the operation after the event handler has finished executing.
            </summary>
        </member>
        <member name="T:RiotNet.IRiotClient">
            <summary>
            A client that interacts with the Riot Games API.
            </summary>
        </member>
        <member name="P:RiotNet.IRiotClient.PlatformId">
            <summary>
            Gets the platform ID of the default server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.IRiotClient.Settings">
            <summary>
            Gets the settings for the current <see cref="T:RiotNet.IRiotClient"/>.
            </summary>
        </member>
        <member name="E:RiotNet.IRiotClient.RequestTimedOut">
            <summary>
            Occurs when the a request times out.
            </summary>
        </member>
        <member name="E:RiotNet.IRiotClient.ConnectionFailed">
            <summary>
            Occurs when the client fails to connect to the server while executing a request.
            </summary>
        </member>
        <member name="E:RiotNet.IRiotClient.RateLimitExceeded">
            <summary>
            Occurs when the client executes a request when the API rate limit has been exceeded.
            </summary>
        </member>
        <member name="E:RiotNet.IRiotClient.ServerError">
            <summary>
            Occurs when the server returns an error code of 500 or higher.
            </summary>
        </member>
        <member name="E:RiotNet.IRiotClient.ResourceNotFound">
            <summary>
            Occurs when a request fails because a resource was not found.
            </summary>
        </member>
        <member name="E:RiotNet.IRiotClient.ResponseError">
            <summary>
            Occurs when a response returns an error code that does not fit into any other category, or an exception occurs during the response.
            </summary>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionsAsync(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets dynamic champion information for all champions. This method uses the Champion API.
            </summary>
            <param name="freeToPlay">True to request only free-to-play champion information. Default is false.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionByIdAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets dynamic champion information for the specified champion. This method uses the Champion API.
            </summary>
            <param name="id">The champion id.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionMasteryAsync(System.String,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets information about a summoner's mastery of a champion. This method uses the Champion Mastery API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="championId">The champion ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionMasteriesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets information about a summoner's mastery of all champions they have played. This method uses the Champion Mastery API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChampionMasteryScoreAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a summoner's champion mastery score (the sum of the champion levels of all champions for that summoner). This method uses the Champion Mastery API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetLeagueByIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the full league information for all leagues that the summoners are in, including the leages for the teams they are on. Data is mapped by summoner ID. This method uses the League API.
            </summary>
            <param name="leagueId">The UIID of the league.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetLeaguesBySummonerIdAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the full league information for all leagues that the summoners are in, including the leages for the teams they are on. Data is mapped by summoner ID. This method uses the League API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetLeaguePositionsBySummonerIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get league positions in all queues for a given summoner ID. This method uses the League API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetChallengerLeagueAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the challenger league. This method uses the League API.
            </summary>
            <param name="rankedQueueType">The queue type. This should equal one of the <see cref="T:RiotNet.Models.RankedQueue"/> values.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetGrandmasterLeagueAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the grandmaster league. This method uses the League API.
            </summary>
            <param name="rankedQueueType">The queue type. This should equal one of the <see cref="T:RiotNet.Models.RankedQueue"/> values.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMasterLeagueAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the master league. This method uses the League API.
            </summary>
            <param name="rankedQueueType">The queue type. This should equal one of the <see cref="T:RiotNet.Models.RankedQueue"/> values.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMatchAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details of a match. This method uses the Match API.
            </summary>
            <param name="matchId">The ID of the match.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMatchTimelineAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the timeline of a match. This method uses the Match API.
            </summary>
            <param name="matchId">The ID of the match.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMatchListByAccountIdAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{RiotNet.Models.QueueType},System.Collections.Generic.IEnumerable{RiotNet.Models.Season},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the match list for a summoner. This method uses the Match API.
            </summary>
            <param name="accountId">The summoner's account ID.</param>
            <param name="championIds">Only get games where the summoner played one of these champions.</param>
            <param name="rankedQueues">Only get games from these queues. You should only use ranked queues for this (<see cref="F:RiotNet.Models.QueueType.TEAM_BUILDER_RANKED_SOLO"/>, <see cref="F:RiotNet.Models.QueueType.RANKED_FLEX_SR"/>, <see cref="F:RiotNet.Models.QueueType.RANKED_FLEX_TT"/>).</param>
            <param name="seasons">Only get games from these seasons.</param>
            <param name="beginTime">Only get games played after this time.</param>
            <param name="endTime">Only get games played before this time.</param>
            <param name="beginIndex">The begin index to use for fetching games.</param>
            <param name="endIndex">The end index to use for fetching games. The maximum allowed difference between beginIndex and endIndex is 20; if it is larger than 20, endIndex will be modified to satisfy this restriction.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetRecentMatchListByAccountIdAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the recent match list for an account. This method uses the Match API.
            </summary>
            <param name="accountId">The account ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMatchIdsByTournamentCodeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the list of match IDs for a tournament code. This method uses the Match API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="tournamentCode">The tournament code.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetMatchForTournamentAsync(System.Int64,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details of a match. This method uses the Match API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="matchId">The ID of the match.</param>
            <param name="tournamentCode">The tournament code.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetActiveGameBySummonerIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets information about the current game a summoner is playing. This method uses the Spectator API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetFeaturedGamesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the games currently featured in the League of Legends client. This method uses the Spectator API.
            </summary>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticChampionsAsync(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all champions. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="locale">Locale code for returned data. If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="dataById">If true, the returned data map will use the champions' IDs as the keys. If false, the returned data map will use the champions' keys instead.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticChampion"/> or <see cref="T:RiotNet.Models.StaticChampionList"/> objects. Only type, version, data, id, name, key, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticChampionByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets champion details by ID. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="id">The champion ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticChampion"/> object. Only id, name, key, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticItemsAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of all available items. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticItem"/> or <see cref="T:RiotNet.Models.StaticItemList"/> objects. Only id, name, type, version, basic, data, plaintext, group, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticItemAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an item by its ID. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="id">The item ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticItem"/> or <see cref="T:RiotNet.Models.StaticItemList"/> objects. Only id, name, type, version, basic, data, plaintext, group, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of available languages. This method uses the LoL Static Data API.
            </summary>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticLanguageStringsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of available language strings. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticMapsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of all maps. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticMasteriesAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all masteries. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticMastery"/> or <see cref="T:RiotNet.Models.StaticMasteryList"/> objects. Only type, version, data, id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticMasteryByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets mastery details by ID. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="id">The mastery ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticMastery"/> object. Only id, name, description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticProfileIconsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the profile icon data. This method uses the LoL Static Data API.
            </summary>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticRealmAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the realm data. This method uses the LoL Static Data API.
            </summary>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticRunesAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of all available runes. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticRune"/> or <see cref="T:RiotNet.Models.StaticRuneList"/> objects. Only type, version, data, id, name, rune, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticRuneByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a rune by ID. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="id">The rune ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticRune"/> object. Only id, name, rune, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticSummonerSpellsAsync(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all summoner spells. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="dataById">If true, the returned data map will use the spells' IDs as the keys. If false, the returned data map will use the spells' keys instead.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticSummonerSpell"/> or <see cref="T:RiotNet.Models.StaticSummonerSpellList"/> objects. Only type, version, data, id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetStaticSummonerSpellByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets summoner spell details by ID. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="id">The summoner spell ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.IRiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticSummonerSpell"/> object. Only id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the list of available game versions. This method uses the LoL Static Data API.
            </summary>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.GetShardDataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the data for the shard for the specified platform. This method uses the LoL Status API.
            </summary>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonerByAccountIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the summoner information by account ID. This method uses the Summoner API.
            </summary>
            <param name="accountId">The account ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonerBySummonerNameAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the summoner information for the specified summoner name. This method uses the Summoner API.
            </summary>
            <param name="summonerName">The summoner name.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonerBySummonerIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the summoner information for the specified summoner ID. This method uses the Summoner API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetSummonerByPuuidAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the summoner information for the specified summoner ID. This method uses the Summoner API.
            </summary>
            <param name="summonerPuuid">The summoner PUUID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetThirdPartyCodeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a code that a third-party application can use to verify a summoner.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>For KR summoners, a 404 will always be returned.</remarks>
        </member>
        <member name="M:RiotNet.IRiotClient.CreateTournamentProviderAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Registers the current client as a tournament provider. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="url">The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).</param>
            <param name="platformId">The platform ID of the region in which the provider will be running tournaments. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.CreateTournamentProviderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Registers the current client as a tournament provider. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="url">The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).</param>
            <param name="platformId">The platform ID of the region in which the provider will be running tournaments. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.CreateTournamentAsync(System.Int64,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a tournament. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="providerId">The providerID obtained from CreateTournamentProviderAsync.</param>
            <param name="name">The optional name of the tournament.</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.CreateTournamentAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a tournament. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="providerId">The providerID obtained from CreateTournamentProviderAsync.</param>
            <param name="name">The optional name of the tournament.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.CreateTournamentCodeAsync(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates one or more tournament codes. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="tournamentId">The tournament ID obtained from CreateTournamentAsync.</param>
            <param name="count">The number of codes to create (max 1000).</param>
            <param name="allowedSummonerIds">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game. This should equal one of the <see cref="T:RiotNet.Models.MapType"/> values. Note that <see cref="F:RiotNet.Models.MapType.CRYSTAL_SCAR"/> is not allowed.</param>
            <param name="pickType">The pick type of the game. This should equal one of the <see cref="T:RiotNet.Models.PickType"/> values.</param>
            <param name="spectatorType">The spectator type of the game. This should equal one of the <see cref="T:RiotNet.Models.SpectatorType"/> values.</param>
            <param name="teamSize">The team size of the game. Valid values are 1-5.</param>
            <param name="metadata">Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.CreateTournamentCodeAsync(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates one or more tournament codes. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="tournamentId">The tournament ID obtained from CreateTournamentAsync.</param>
            <param name="count">The number of codes to create (max 1000).</param>
            <param name="allowedSummonerIds">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game. This should equal one of the <see cref="T:RiotNet.Models.MapType"/> values. Note that <see cref="F:RiotNet.Models.MapType.CRYSTAL_SCAR"/> is not allowed.</param>
            <param name="pickType">The pick type of the game. This should equal one of the <see cref="T:RiotNet.Models.PickType"/> values.</param>
            <param name="spectatorType">The spectator type of the game. This should equal one of the <see cref="T:RiotNet.Models.SpectatorType"/> values.</param>
            <param name="teamSize">The team size of the game. Valid values are 1-5.</param>
            <param name="metadata">Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.CreateTournamentCodeAsync(RiotNet.Models.TournamentCode,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The definition for the tournament code(s) to create.</param>
            <param name="count">The number of codes to create (max 1000).</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.CreateTournamentCodeAsync(RiotNet.Models.TournamentCode,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The definition for the tournament code(s) to create.</param>
            <param name="count">The number of codes to create (max 1000).</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetTournamentCodeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details of a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The tournament code obtained from CreateTournamentCodeAsync.</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetTournamentCodeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details of a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The tournament code obtained from CreateTournamentCodeAsync.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.UpdateTournamentCodeAsync(System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The tournament code obtained from CreateTournamentCodeAsync.</param>
            <param name="allowedParticipants">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game. This should equal one of the <see cref="T:RiotNet.Models.MapType"/> values. Note that <see cref="F:RiotNet.Models.MapType.CRYSTAL_SCAR"/> is not allowed.</param>
            <param name="pickType">The pick type of the game. This should equal one of the <see cref="T:RiotNet.Models.PickType"/> values.</param>
            <param name="spectatorType">The spectator type of the game. This should equal one of the <see cref="T:RiotNet.Models.SpectatorType"/> values.</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.UpdateTournamentCodeAsync(System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The tournament code obtained from CreateTournamentCodeAsync.</param>
            <param name="allowedParticipants">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game. This should equal one of the <see cref="T:RiotNet.Models.MapType"/> values. Note that <see cref="F:RiotNet.Models.MapType.CRYSTAL_SCAR"/> is not allowed.</param>
            <param name="pickType">The pick type of the game. This should equal one of the <see cref="T:RiotNet.Models.PickType"/> values.</param>
            <param name="spectatorType">The spectator type of the game. This should equal one of the <see cref="T:RiotNet.Models.SpectatorType"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.UpdateTournamentCodeAsync(RiotNet.Models.TournamentCode,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The tournament code to update. Only the Code, Participants, MapType, PickType, and SpectatorType properties are used.</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.UpdateTournamentCodeAsync(RiotNet.Models.TournamentCode,System.Threading.CancellationToken)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The tournament code to update. Only the Code, Participants, MapType, PickType, and SpectatorType properties are used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetTournamentCodeLobbyEventsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the events that happened in the lobby of atournament code game. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="tournamentCode">The tournament code obtained from CreateTournamentCodeAsync.</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="M:RiotNet.IRiotClient.GetTournamentCodeLobbyEventsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the events that happened in the lobby of atournament code game. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="tournamentCode">The tournament code obtained from CreateTournamentCodeAsync.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="T:RiotNet.RiotClient">
            <summary>
            A client that interacts with the Riot Games API.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClient"/> instance.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.#ctor(RiotNet.IRateLimiter)">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClient"/> instance.
            <param name="rateLimiter">The rate limiter to use for proactive rate limiting.</param>
            </summary>
            <remarks>
            You should pass the same <see cref="T:RiotNet.IRateLimiter"/> instance to all <see cref="T:RiotNet.RiotClient"/> instances. Do not create multiple <see cref="T:RiotNet.IRateLimiter"/> instances.
            Reactive rate limiting will always be used, even if a proactive rate limiter is not specified.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClient"/> instance.
            </summary>
            <param name="apiKey">The API key to use. NOTE: If you are using a public repository, do NOT check you API key in to the repository.
            It is recommended to load your API key from a separate file (e.g. key.txt) that is ignored by your repository.</param>
        </member>
        <member name="M:RiotNet.RiotClient.#ctor(RiotNet.RiotClientSettings)">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClient"/> instance.
            </summary>
            <param name="settings">The settings to use.</param>
        </member>
        <member name="M:RiotNet.RiotClient.#ctor(System.String,System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClient"/> instance.
            </summary>
            <param name="apiKey">The API key to use. NOTE: If you are using a public repository, do NOT check you API key in to the repository.
            It is recommended to load your API key from a separate file (e.g. key.txt) that is ignored by your repository.</param>
            <param name="platformId">The platform ID of the default server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.</param>
        </member>
        <member name="M:RiotNet.RiotClient.#ctor(RiotNet.RiotClientSettings,System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClient"/> instance.
            </summary>
            <param name="settings">The settings to use.</param>
            <param name="platformId">The platform ID of the default server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.</param>
        </member>
        <member name="M:RiotNet.RiotClient.#ctor(RiotNet.RiotClientSettings,System.String,RiotNet.IRateLimiter)">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClient"/> instance.
            </summary>
            <param name="settings">The settings to use.</param>
            <param name="platformId">The platform ID of the default server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.</param>
            <param name="appRateLimiter">The rate limiter to use for proactive rate limiting.</param>
            <remarks>
            You should pass the same <see cref="T:RiotNet.IRateLimiter"/> instance to all <see cref="T:RiotNet.RiotClient"/> instances. Do not create multiple <see cref="T:RiotNet.IRateLimiter"/> instances.
            Reactive rate limiting will always be used, even if a proactive rate limiter is not specified.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.ForPlatform(System.String)">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClient"/> instance for the specified platform ID.
            </summary>
            <param name="platformId">The platform ID of the default server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.</param>
            <returns>A RiotClient.</returns>
        </member>
        <member name="P:RiotNet.RiotClient.JsonSettings">
            <summary>
            Gets the JsonSerializerSettings that are used to deserialize responses from the Riot API. 
            </summary>
        </member>
        <member name="P:RiotNet.RiotClient.DefaultPlatformId">
            <summary>
            Gets or sets the default platform ID to use when creating a new <see cref="T:RiotNet.RiotClient"/>. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClient.RateLimiter">
            <summary>
            Gets or sets the rate limiter to use for proactive rate limiting.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClient.DefaultSettings">
            <summary>
            Gets or sets a function that defines the default <see cref="T:RiotNet.RiotClientSettings"/> to use when creating a new <see cref="T:RiotNet.RiotClient"/>.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClient.PlatformId">
            <summary>
            Gets the platform ID of the default server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.
            </summary>
        </member>
        <member name="E:RiotNet.RiotClient.RequestTimedOut">
            <summary>
            Occurs when a request times out.
            </summary>
        </member>
        <member name="E:RiotNet.RiotClient.ConnectionFailed">
            <summary>
            Occurs when the client fails to connect to the server, or when an exception occurs while executing a request.
            </summary>
        </member>
        <member name="E:RiotNet.RiotClient.RateLimitExceeded">
            <summary>
            Occurs when the client executes a request when the API rate limit has been exceeded (status code 429).
            </summary>
        </member>
        <member name="E:RiotNet.RiotClient.ServerError">
            <summary>
            Occurs when the server returns an error code of 500 or higher.
            </summary>
        </member>
        <member name="E:RiotNet.RiotClient.ResourceNotFound">
            <summary>
            Occurs when a request fails because a resource was not found (status code 404).
            </summary>
        </member>
        <member name="E:RiotNet.RiotClient.ResponseError">
            <summary>
            Occurs when a response returns an error code that does not fit into any other category, or an exception occurs during the response.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClient.Settings">
            <summary>
            Gets the settings for the <see cref="T:RiotNet.RiotClient"/>.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClient.Client">
            <summary>
            Gets a reference to the underlying HTTP client.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.CreateHttpClient">
            <summary>
            Creates the underlying HttpClient. Override this method if you want to use a custom HttpMessageHandler for testing purposes.
            </summary>
            <returns>An HttpClient.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetAsync``1(System.String,System.String,System.String,System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sends a GET request for the specified resource.
            </summary>
            <param name="resource">The resource path, relative to the base URL. Note: this method will automatically add the api_key parameter to the resource.</param>
            <param name="resourceName">The resource path without any parameter values. Used for rate limiting purposes.</param>
            <param name="platformId">The platform ID corresponding to the server. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <param name="queryParameters">Query string parameters to append to the resource.</param>
            <returns>A rest request.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.PostAsync``1(System.String,System.String,System.Object,System.String,System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a POST request for the specified resource. The region, platformId, and api_key parameters are automatically added to the request.
            </summary>
            <param name="resource">The resource path, relative to the base URL. Note: this method will automatically add the api_key parameter to the resource.</param>
            <param name="resourceName">The resource path without any parameter values. Used for rate limiting purposes.</param>
            <param name="body">The body of the request. This object will be serialized as a JSON string.</param>
            <param name="platformId">The platform ID corresponding to the server. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <param name="queryParameters">Query string parameters to append to the resource.</param>
            <returns>A rest request.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.PutAsync``1(System.String,System.String,System.Object,System.String,System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a PUT request for the specified resource. The region, platformId, and api_key parameters are automatically added to the request.
            </summary>
            <param name="resource">The resource path, relative to the base URL. Note: this method will automatically add the api_key parameter to the resource.</param>
            <param name="resourceName">The resource path without any parameter values. Used for rate limiting purposes.</param>
            <param name="body">The body of the request. This object will be serialized as a JSON string.</param>
            <param name="platformId">The platform ID corresponding to the server. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <param name="queryParameters">Query string parameters to append to the resource.</param>
            <returns>A rest request.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.ExecuteAsync``1(System.Net.Http.HttpMethod,System.String,System.String,System.Object,System.String,System.Threading.CancellationToken,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Executes a REST request asynchronously.
            </summary>
            <typeparam name="T">The type of data to expect in the response.</typeparam>
            <param name="method">The HTTP method to use.</param>
            <param name="resource">The URL of the resource to use.</param>
            <param name="resourceName">The resource path without any parameter values. Used for rate limiting purposes.</param>
            <param name="body">The request body. This object will be serialized as a JSON string. Pass null if the request sohuld not have a body.</param>
            <param name="platformId">The platform ID corresponding to the server. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <param name="queryParameters">Query string parameters to append to the resource.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.ExecuteAsync``1(System.Func{System.Net.Http.HttpRequestMessage},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Executes a REST request asynchronously.
            </summary>
            <typeparam name="T">The type of data to expect in the response.</typeparam>
            <param name="buildRequest">A function that builds the request to execute.</param>
            <param name="methodName">The name of the method being executed (for rate limiting purposes).</param>
            <param name="platformId">The platform ID corresponding to the server. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.SendAsync(System.Net.Http.HttpRequestMessage,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Sends a request.
            </summary>
            <param name="request">The request to send.</param>
            <param name="methodName">The name of the method being executed (for rate limiting purposes).</param>
            <param name="platformId">The platform ID corresponding to the server. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.DetermineResponseAction(RiotNet.RiotResponse,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Determines which action to take for the given response.
            </summary>
            <param name="response">An <see cref="T:System.Net.Http.HttpResponseMessage"/>.</param>
            <param name="attemptCount">The number of times the request has been attempted so far.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A <see cref="T:RiotNet.RiotClient.ResponseAction"/>.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetServerErrorMessage(RiotNet.RiotResponse)">
            <summary>
            Gets the error message from the response body if it exists.
            </summary>
            <param name="response">The response from the server.</param>
            <returns>The error messsage, or null if no error message was found.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.ParseRateLimits(System.String)">
            <summary>
            Parses the rate limits in an X-Rate-Limit header.
            </summary>
            <param name="rateLimitString">The contents of the rate limit header.</param>
            <returns>A list of rate limit rules.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.OnRequestTimedOut(RiotNet.RetryEventArgs)">
            <summary>
            Occurs when a request times out.
            </summary>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="M:RiotNet.RiotClient.OnConnectionFailed(RiotNet.RetryEventArgs)">
            <summary>
            Occurs when the client fails to connect to the server while executing a request.
            </summary>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="M:RiotNet.RiotClient.OnRateLimitExceeded(RiotNet.RetryEventArgs)">
            <summary>
            Occurs when a request fails because the rate limit has been exceeded (status code 429).
            </summary>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="M:RiotNet.RiotClient.OnServerError(RiotNet.RetryEventArgs)">
            <summary>
            Occurs when the server returns an error code of 500 or higher.
            </summary>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="M:RiotNet.RiotClient.OnResourceNotFound(RiotNet.ResponseEventArgs)">
            <summary>
            Occurs when a request fails because a resource was not found (status code 404).
            </summary>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="M:RiotNet.RiotClient.OnResponseError(RiotNet.ResponseEventArgs)">
            <summary>
            Occurs when a response returns an error code that does not fit into any other category, or an exception occurs during the response.
            </summary>
            <param name="e">Arguments for the event.</param>
        </member>
        <member name="T:RiotNet.RiotClient.ResponseAction">
            <summary>
            Specifies the action to take after processing a request.
            </summary>
        </member>
        <member name="F:RiotNet.RiotClient.ResponseAction.Return">
            <summary>
            Indicates that the response was received successfully, and its data should be returned.
            </summary>
        </member>
        <member name="F:RiotNet.RiotClient.ResponseAction.ReturnDefault">
            <summary>
            Indicates that the response was NOT received successfully, and the default value of the type (null in most cases) should be returned.
            </summary>
        </member>
        <member name="F:RiotNet.RiotClient.ResponseAction.Retry">
            <summary>
            Indicates that the response was NOT received successfully, and the request should be re-sent (unless the maximum number of attempts has been exceeded).
            </summary>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionsAsync(System.Boolean,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets dynamic champion information for all champions. This method uses the Champion API.
            </summary>
            <param name="freeToPlay">True to request only free-to-play champion information. Default is false.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionByIdAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets dynamic champion information for the specified champion. This method uses the Champion API.
            </summary>
            <param name="id">The champion id.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionMasteryAsync(System.String,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets information about a summoner's mastery of a champion. This method uses the Champion Mastery API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="championId">The champion ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionMasteriesAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets information about a summoner's mastery of all champions they have played. This method uses the Champion Mastery API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChampionMasteryScoreAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a summoner's champion mastery score (the sum of the champion levels of all champions for that summoner). This method uses the Champion Mastery API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetLeagueByIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the full league information for all leagues that the summoners are in, including the leages for the teams they are on. Data is mapped by summoner ID. This method uses the League API.
            </summary>
            <param name="leagueId">The UIID of the league.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetLeaguesBySummonerIdAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the full league information for all leagues that the summoners are in, including the leages for the teams they are on. Data is mapped by summoner ID. This method uses the League API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetLeaguePositionsBySummonerIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Get league positions in all queues for a given summoner ID. This method uses the League API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetChallengerLeagueAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the challenger league. This method uses the League API.
            </summary>
            <param name="rankedQueueType">The queue type. This should equal one of the <see cref="T:RiotNet.Models.RankedQueue"/> values.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetGrandmasterLeagueAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the grandmaster league. This method uses the League API.
            </summary>
            <param name="rankedQueueType">The queue type. This should equal one of the <see cref="T:RiotNet.Models.RankedQueue"/> values.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetMasterLeagueAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the master league. This method uses the League API.
            </summary>
            <param name="rankedQueueType">The queue type. This should equal one of the <see cref="T:RiotNet.Models.RankedQueue"/> values.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetMatchAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details of a match. This method uses the Match API.
            </summary>
            <param name="matchId">The ID of the match.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetMatchTimelineAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the timeline of a match. This method uses the Match API.
            </summary>
            <param name="matchId">The ID of the match.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetMatchListByAccountIdAsync(System.String,System.Collections.Generic.IEnumerable{System.Int64},System.Collections.Generic.IEnumerable{RiotNet.Models.QueueType},System.Collections.Generic.IEnumerable{RiotNet.Models.Season},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the match list for an account. This method uses the Match API.
            </summary>
            <param name="accountId">The account ID.</param>
            <param name="championIds">Only get games where the summoner played one of these champions.</param>
            <param name="rankedQueues">Only get games from these queues. You should only use ranked queues for this (<see cref="F:RiotNet.Models.QueueType.TEAM_BUILDER_RANKED_SOLO"/>, <see cref="F:RiotNet.Models.QueueType.RANKED_FLEX_SR"/>, <see cref="F:RiotNet.Models.QueueType.RANKED_FLEX_TT"/>).</param>
            <param name="seasons">Only get games from these seasons.</param>
            <param name="beginTime">Only get games played after this time. If beginTime is specified, but not endTime, then these parameters are ignored. If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.</param>
            <param name="endTime">Only get games played before this time. If beginTime is specified, but not endTime, then these parameters are ignored. If endTime is specified, but not beginTime, then beginTime defaults to the start of the account's match history. If both are specified, then endTime should be greater than beginTime. The maximum time range allowed is one week, otherwise a 400 error code is returned.</param>
            <param name="beginIndex">The begin index to use for fetching games. If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.</param>
            <param name="endIndex">The end index to use for fetching games. If beginIndex is specified, but not endIndex, then endIndex defaults to beginIndex+100. If endIndex is specified, but not beginIndex, then beginIndex defaults to 0. If both are specified, then endIndex must be greater than beginIndex. The maximum range allowed is 100, otherwise a 400 error code is returned.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetRecentMatchListByAccountIdAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the recent match list for an account. This method uses the Match API.
            </summary>
            <param name="accountId">The account ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetMatchIdsByTournamentCodeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the list of match IDs for a tournament code. This method uses the Match API.
            </summary>
            <param name="tournamentCode">The tournament code.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetMatchForTournamentAsync(System.Int64,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details of a match. This method uses the Match API. This endpoint is only accessible if you have a tournament API key.
            </summary>
            <param name="matchId">The ID of the match.</param>
            <param name="tournamentCode">The tournament code.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetActiveGameBySummonerIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets information about the current game a summoner is playing. This method uses the Spectator API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetFeaturedGamesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the games currently featured in the League of Legends client. This method uses the Spectator API.
            </summary>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticChampionsAsync(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all champions. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="dataById">If true, the returned data map will use the champions' IDs as the keys. If false, the returned data map will use the champions' keys instead.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticChampion"/> or <see cref="T:RiotNet.Models.StaticChampionList"/> objects. Only type, version, data, id, name, key, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticChampionByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets champion details by ID. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="id">The champion ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticChampion"/> object. Only id, name, key, and title are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticItemsAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of all available items. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticItem"/> or <see cref="T:RiotNet.Models.StaticItemList"/> objects. Only id, name, type, version, basic, data, plaintext, group, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticItemAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets an item by its ID. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="id">The item ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticItem"/> or <see cref="T:RiotNet.Models.StaticItemList"/> objects. Only id, name, type, version, basic, data, plaintext, group, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of available languages. This method uses the LoL Static Data API.
            </summary>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticLanguageStringsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of available language strings. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticMapsAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of all maps. This method uses the LoL Static Data API.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticMasteriesAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all masteries. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticMastery"/> or <see cref="T:RiotNet.Models.StaticMasteryList"/> objects. Only type, version, data, id, name, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticMasteryByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets mastery details by ID. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="id">The mastery ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticMastery"/> object. Only id, name, description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticProfileIconsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the profile icon data. This method uses the LoL Static Data API.
            </summary>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Note that you can use avatar.leagueoflegends.com to get anyone's profile icon using the format http://avatar.leagueoflegends.com/region/name.png (e.g., http://avatar.leagueoflegends.com/NA/RiotSchmick.png).
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticRealmAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the realm data. This method uses the LoL Static Data API.
            </summary>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticRunesAsync(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a list of all available runes. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticRune"/> or <see cref="T:RiotNet.Models.StaticRuneList"/> objects. Only type, version, data, id, name, rune, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticRuneByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a rune by ID. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="id">The rune ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticRune"/> object. Only id, name, rune, and description are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticSummonerSpellsAsync(System.String,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details for all summoner spells. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. List of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="dataById">If true, the returned data map will use the spells' IDs as the keys. If false, the returned data map will use the spells' keys instead.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticSummonerSpell"/> or <see cref="T:RiotNet.Models.StaticSummonerSpellList"/> objects. Only type, version, data, id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetStaticSummonerSpellByIdAsync(System.Int32,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.String,System.Threading.CancellationToken)">
            <summary>
            Gets summoner spell details by ID. This method uses the LoL Static Data API. NOTE: Most properties are not returned by default! Use the tags parameter to specify which properties you want.
            </summary>
            <param name="id">The summoner spell ID.</param>
            <param name="locale">Locale code for returned data (e.g., en_US, es_ES). If not specified, the default locale for the region is used. This should equal one of the <see cref="T:RiotNet.Models.Locale"/> values, or one of the values returned by <see cref="M:RiotNet.IRiotClient.GetStaticLanguagesAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="version">The game version for returned data. If not specified, the latest version for the region is used. A list of valid versions can be obtained from <see cref="M:RiotNet.RiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)"/>.</param>
            <param name="tags">Tags to return additional data. Valid tags are any property of the <see cref="T:RiotNet.Models.StaticSummonerSpell"/> object. Only id, key, name, description, and summonerLevel are returned by default if this parameter isn't specified. To return all additional data, use the tag 'all'.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetVersionsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the list of available game versions. This method uses the LoL Static Data API.
            </summary>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>
            Calls to this method will not count toward your API rate limit.
            </remarks>
        </member>
        <member name="M:RiotNet.RiotClient.GetShardDataAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the data for the shard for the specified platform. This method uses the LoL Status API.
            </summary>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonerByAccountIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the summoner information by account ID. This method uses the Summoner API.
            </summary>
            <param name="accountId">The account ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonerBySummonerNameAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the summoner information for the specified summoner name. This method uses the Summoner API.
            </summary>
            <param name="summonerName">The summoner name.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonerBySummonerIdAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the summoner information for the specified summoner ID. This method uses the Summoner API.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetSummonerByPuuidAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the summoner information for the specified summoner ID. This method uses the Summoner API.
            </summary>
            <param name="summonerPuuid">The summoner PUUID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetThirdPartyCodeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets a code that a third-party application can use to verify a summoner.
            </summary>
            <param name="summonerId">The summoner ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
            <remarks>For KR summoners, a 404 will always be returned.</remarks>
        </member>
        <member name="M:RiotNet.RiotClient.CreateTournamentProviderAsync(System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Registers the current client as a tournament provider. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="url">The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).</param>
            <param name="platformId">The platform ID of the region in which the provider will be running tournaments. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.CreateTournamentProviderAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Registers the current client as a tournament provider. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="url">The provider's callback URL to which tournament game results in this region should be posted. The URL must be well-formed, use the http or https protocol, and use the default port for the protocol (http URLs must use port 80, https URLs must use port 443).</param>
            <param name="platformId">The platform ID of the region in which the provider will be running tournaments. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.RiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.CreateTournamentAsync(System.Int64,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a tournament. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="providerId">The providerId obtained from CreateTournamentProviderAsync.</param>
            <param name="name">The optional name of the tournament.</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.CreateTournamentAsync(System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates a tournament. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="providerId">The providerId obtained from CreateTournamentProviderAsync.</param>
            <param name="name">The optional name of the tournament.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.CreateTournamentCodeAsync(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Int32,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates one or more tournament codes. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="tournamentId">The tournament ID obtained from CreateTournamentAsync.</param>
            <param name="count">The number of codes to create (max 1000).</param>
            <param name="allowedSummonerIds">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game. This should equal one of the <see cref="T:RiotNet.Models.MapType"/> values. Note that <see cref="F:RiotNet.Models.MapType.CRYSTAL_SCAR"/> is not allowed.</param>
            <param name="pickType">The pick type of the game. This should equal one of the <see cref="T:RiotNet.Models.PickType"/> values.</param>
            <param name="spectatorType">The spectator type of the game. This should equal one of the <see cref="T:RiotNet.Models.SpectatorType"/> values.</param>
            <param name="teamSize">The team size of the game. Valid values are 1-5.</param>
            <param name="metadata">Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.CreateTournamentCodeAsync(System.Int64,System.Nullable{System.Int32},System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Int32,System.String,System.Threading.CancellationToken)">
            <summary>
            Creates one or more tournament codes. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="tournamentId">The tournament ID obtained from CreateTournamentAsync.</param>
            <param name="count">The number of codes to create (max 1000).</param>
            <param name="allowedSummonerIds">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game. This should equal one of the <see cref="T:RiotNet.Models.MapType"/> values. Note that <see cref="F:RiotNet.Models.MapType.CRYSTAL_SCAR"/> is not allowed.</param>
            <param name="pickType">The pick type of the game. This should equal one of the <see cref="T:RiotNet.Models.PickType"/> values.</param>
            <param name="spectatorType">The spectator type of the game. This should equal one of the <see cref="T:RiotNet.Models.SpectatorType"/> values.</param>
            <param name="teamSize">The team size of the game. Valid values are 1-5.</param>
            <param name="metadata">Optional string that may contain any data in any format, if specified at all. Used to denote any custom information about the game.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.CreateTournamentCodeAsync(RiotNet.Models.TournamentCode,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The definition for the tournament code(s) to create.</param>
            <param name="count">The number of codes to create (max 1000).</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.CreateTournamentCodeAsync(RiotNet.Models.TournamentCode,System.Nullable{System.Int32},System.Threading.CancellationToken)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The definition for the tournament code(s) to create.</param>
            <param name="count">The number of codes to create (max 1000).</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetTournamentCodeAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details of a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The tournament code obtained from CreateTournamentCodeAsync.</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetTournamentCodeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the details of a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The tournament code obtained from CreateTournamentCodeAsync.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.UpdateTournamentCodeAsync(System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The tournament code obtained from CreateTournamentCodeAsync.</param>
            <param name="allowedSummonerIds">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game. This should equal one of the <see cref="T:RiotNet.Models.MapType"/> values. Note that <see cref="F:RiotNet.Models.MapType.CRYSTAL_SCAR"/> is not allowed.</param>
            <param name="pickType">The pick type of the game. This should equal one of the <see cref="T:RiotNet.Models.PickType"/> values.</param>
            <param name="spectatorType">The spectator type of the game. This should equal one of the <see cref="T:RiotNet.Models.SpectatorType"/> values.</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.UpdateTournamentCodeAsync(System.String,System.Collections.Generic.List{System.String},System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The tournament code obtained from CreateTournamentCodeAsync.</param>
            <param name="allowedSummonerIds">Optional list of participants in order to validate the players eligible to join the lobby.</param>
            <param name="mapType">The map type of the game. This should equal one of the <see cref="T:RiotNet.Models.MapType"/> values. Note that <see cref="F:RiotNet.Models.MapType.CRYSTAL_SCAR"/> is not allowed.</param>
            <param name="pickType">The pick type of the game. This should equal one of the <see cref="T:RiotNet.Models.PickType"/> values.</param>
            <param name="spectatorType">The spectator type of the game. This should equal one of the <see cref="T:RiotNet.Models.SpectatorType"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.UpdateTournamentCodeAsync(RiotNet.Models.TournamentCode,System.String,System.Threading.CancellationToken)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The tournament code to update. Only the Code, Participants, MapType, PickType, and SpectatorType properties are used.</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.UpdateTournamentCodeAsync(RiotNet.Models.TournamentCode,System.Threading.CancellationToken)">
            <summary>
            Saves changes to a tournament code. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            This method does NOT support the tournament stub API.
            </summary>
            <param name="tournamentCode">The tournament code to update. Only the Code, Participants, MapType, PickType, and SpectatorType properties are used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetTournamentCodeLobbyEventsAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the events that happened in the lobby of atournament code game. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="tournamentCode">The tournament code obtained from CreateTournamentCodeAsync.</param>
            <param name="regionalProxy">The name of the regional proxy service. This should equal one of the <see cref="T:RiotNet.Models.RegionalProxy"/> values.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetTournamentCodeLobbyEventsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the events that happened in the lobby of atournament code game. This method uses the Tournament API. This endpoint is only accessible if you have a tournament API key.
            IMPORTANT: if you are using an interim API key, you must set <see cref="P:RiotNet.RiotClientSettings.UseTournamentStub"/> to true before calling this method.
            </summary>
            <param name="tournamentCode">The tournament code obtained from CreateTournamentCodeAsync.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>The tournament code details.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetTournamentBaseUrl(System.Boolean)">
            <summary>
            Gets the base URL for tournament requests.
            </summary>
            <param name="stub">Indicates whether to use the tournament-stub API instead of the tournament API.</param>
            <returns>The base URL.</returns>
        </member>
        <member name="M:RiotNet.RiotClient.GetRegion(System.String)">
            <summary>
            Gets the region for agiven platform ID.
            </summary>
            <param name="platformId">The platform ID.</param>
            <returns>A region.</returns>
        </member>
        <member name="T:RiotNet.RiotClientExtensions">
            <summary>
            Extension methods for the <see cref="T:RiotNet.IRiotClient"/> interface.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClientExtensions.GetCurrentGameBySummonerIdAsync(RiotNet.IRiotClient,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets information about the current game a summoner is playing. This is an alias for <see cref="M:RiotNet.IRiotClient.GetActiveGameBySummonerIdAsync(System.String,System.String,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="riotClient">The IRiotClient instance.</param>
            <param name="summonerId">The summoner ID.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:RiotNet.RiotClientExtensions.GetShardStatusAsync(RiotNet.IRiotClient,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the status of the shard for the specified platform. This is an alias for <see cref="M:RiotNet.IRiotClient.GetShardDataAsync(System.String,System.Threading.CancellationToken)"/>.
            </summary>
            <param name="riotClient">The IRiotClient instance.</param>
            <param name="platformId">The platform ID of the server to connect to. This should equal one of the <see cref="T:RiotNet.Models.PlatformId"/> values. If unspecified, the <see cref="P:RiotNet.IRiotClient.PlatformId"/> property will be used.</param>
            <param name="token">The cancellation token to cancel the operation.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:RiotNet.RiotClientSettings">
            <summary>
            Contains settings for a <see cref="T:RiotNet.RiotClient"/>.
            </summary>
        </member>
        <member name="M:RiotNet.RiotClientSettings.#ctor">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotClientSettings"/> instance.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClientSettings.ApiKey">
            <summary>
            Gets or sets the Riot API key to use.
            NOTE: If you are using a public repository, do NOT check you API key in to the repository.
            It is recommended to load your API key from a separate file (e.g. key.txt) that is ignored by your repository.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClientSettings.UseTournamentStub">
            <summary>
            Gets or sets whether to use the tournament-stub API instead of the tournament API.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClientSettings.RetryOnTimeout">
            <summary>
            Gets or sets how the <see cref="T:RiotNet.RiotClient"/> should handle the case where the request times out.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClientSettings.RetryOnConnectionFailure">
            <summary>
            Gets or sets how the <see cref="T:RiotNet.RiotClient"/> should handle the case where the client fails to connect to the server.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClientSettings.RetryOnRateLimitExceeded">
            <summary>
            Gets or sets how the <see cref="T:RiotNet.RiotClient"/> should handle the case where the rate limit is exceeded.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClientSettings.RetryOnServerError">
            <summary>
            Gets or sets how the <see cref="T:RiotNet.RiotClient"/> should handle the case where server returns an error code of 500 or higher.
            </summary>
            <remarks>
            This is true by default because it seems that the Riot Games API intermittently returns 50x response codes. This can be resolved by re-sending the request.
            </remarks>
        </member>
        <member name="P:RiotNet.RiotClientSettings.ThrowOnError">
            <summary>
            Gets or sets whether the client should throw an exception if an error occurred during the request (that is, the request did not complete, or it completed with a response code of 400 or higher, except for 404 errors).
            </summary>
        </member>
        <member name="P:RiotNet.RiotClientSettings.ThrowOnNotFound">
            <summary>
            Gets or sets whether the client should throw an exception if the server responded with a Not Found (404) error.
            </summary>
        </member>
        <member name="P:RiotNet.RiotClientSettings.MaxRequestAttempts">
            <summary>
            Gets or sets the maximum number of times that the same request should be attempted. Applies only if one of the RequestErrorHandling modes is set to Retry.
            </summary>
        </member>
        <member name="T:RiotNet.RiotNetContractResolver">
            <summary>
            The default Json.Net contract resolver used by the <see cref="T:RiotNet.RiotClient"/>.
            </summary>
        </member>
        <member name="M:RiotNet.RiotNetContractResolver.CreateDictionaryContract(System.Type)">
            <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/> for the given type.
            </summary>
            <param name="objectType">The type of the object.</param>
            <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract"/>.</returns>
        </member>
        <member name="T:RiotNet.RiotResponse">
            <summary>
            A wrapper for the 
            </summary>
        </member>
        <member name="M:RiotNet.RiotResponse.#ctor(System.Net.Http.HttpResponseMessage,System.Exception,System.Boolean)">
            <summary>
            Creates a new <see cref="T:RiotNet.RiotResponse"/> isntance.
            </summary>
            <param name="response">The underlying response from the server.</param>
            <param name="exception">The exception thrown during the request, if any.</param>
            <param name="timedOut">Whether the request timed out or was cancelled.</param>
        </member>
        <member name="P:RiotNet.RiotResponse.Response">
            <summary>
            Gets the underlying response from the server.
            </summary>
        </member>
        <member name="P:RiotNet.RiotResponse.Exception">
            <summary>
            Gets the exception thrown during the request, if any.
            </summary>
        </member>
        <member name="P:RiotNet.RiotResponse.TimedOut">
            <summary>
            Gets whether the request timed out or was cancelled.
            </summary>
        </member>
    </members>
</doc>
